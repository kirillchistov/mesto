(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r,o,i,u){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e.name,this._link=e.link,this._cardSelector=n,this._userId=e.userId,this._ownerId=e.ownerId,this._cardId=e.cardId,this._likes=e.likes,this._handleCardClick=r,this._handleLikeAdd=i,this._handleRemoveLike=u,this._handleCardDelete=o}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"createCardElement",value:function(){return this._element=this._getTemplate(),this._imgElement=this._element.querySelector(".element__image"),this._titleElement=this._element.querySelector(".element__title"),this._likeButton=this._element.querySelector(".element__button-like"),this._deleteButton=this._element.querySelector(".element__button-delete"),this._likesCount=this._element.querySelector(".element__likes-count"),this._imgElement.src=this._link,this._imgElement.alt=this._name,this._imgElement.title=this._name,this._titleElement.textContent=this._name,this._likesCount.textContent="".concat(this._likes.length),this._setEventListeners(),this._handleLikeState(),this.handleDeleteButtonState(),this._element}},{key:"_setEventListeners",value:function(){var e=this;this._likeButton=this._element.querySelector(".element__button-like"),this._deleteButton=this._element.querySelector(".element__button-delete"),this._imgElement.addEventListener("click",(function(){e._handleCardClick(e._link,e._name)})),this._likeButton.addEventListener("click",(function(){e._likeButton.classList.contains("element__button-like_active")?e._handleRemoveLike():e._handleLikeAdd()})),this._deleteButton.addEventListener("click",(function(){e._handleCardDelete()}))}},{key:"_handleLikeState",value:function(){var e=this;this._likes.forEach((function(t){t._id===e._userId?e.addLike():e.removeLike()}))}},{key:"handleDeleteButtonState",value:function(){this._userId!==this._ownerId&&(this._deleteButton.remove(),this._deleteButton=null)}},{key:"addLike",value:function(){this._likeButton.classList.add("element__button-like_active")}},{key:"removeLike",value:function(){this._likeButton.classList.remove("element__button-like_active")}},{key:"setLikesCount",value:function(e){this._likesCount.textContent="".concat(e.likes.length)}},{key:"_deleteCard",value:function(){this._element.remove(),this._element=null}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._form=n,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._submitButton=this._form.querySelector(this._submitButtonSelector)}var t,r;return t=e,(r=[{key:"_getErrorElement",value:function(e){return this._errorElement=this._form.querySelector(".".concat(e.id,"-error")),this._errorElement}},{key:"_showInputError",value:function(e){this._getErrorElement(e),e.classList.add(this._inputErrorClass),this._errorElement.classList.add(this._errorClass),this._errorElement.textContent=e.validationMessage}},{key:"_hideInputError",value:function(e){this._getErrorElement(e),this._errorElement&&(e.classList.remove(this._inputErrorClass),this._errorElement.classList.remove(this._errorClass),this._errorElement.textContent="")}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_checkFormValidity",value:function(){var e=this;this._inputList.forEach((function(t){var n={input:t,errorElement:e._form.querySelector(".".concat(t.id,"-error"))};n.addEventListener("input",(function(){e._checkInputValidity(n),e._toggleSubmitButtonState()}))}))}},{key:"_toggleSubmitButtonState",value:function(){this._hasInvalidInput()?this.deactivateSubmitButton():this.activateSubmitButton()}},{key:"activateSubmitButton",value:function(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}},{key:"deactivateSubmitButton",value:function(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}},{key:"_setEventListeners",value:function(){var e=this;this._toggleSubmitButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleSubmitButtonState()}))}))}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"resetValidation",value:function(){var e=this;this._toggleSubmitButtonState(),this._inputList.forEach((function(t){e._hideInputError(t)}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){return e.preventDefault()})),this._setEventListeners()}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleCloseByEsc=this._handleCloseByEsc.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleCloseByEsc)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleCloseByEsc)}},{key:"_handleCloseByEsc",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target===t.currentTarget||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function s(){return s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=c(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},s.apply(this,arguments)}function c(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=p(e)););return e}function l(e,t){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},l(e,t)}function f(e,t){if(t&&("object"===u(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&l(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=p(r);if(o){var n=p(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return f(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._submitHandler=t,n._form=n._popup.querySelector(".popup__form"),n._inputList=Array.from(n._popup.querySelectorAll(".popup__input")),n._submitButton=n._popup.querySelector(".popup__submit"),n}return t=u,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){return e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;s(p(u.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler(e._getInputValues())}))}},{key:"close",value:function(){s(p(u.prototype),"close",this).call(this),this._form.reset()}},{key:"showLoadingButtonText",value:function(e){this._submitButton.textContent=e?"Сохранение...":"Сохранить"}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(i);function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(){return y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=m(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},y.apply(this,arguments)}function m(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=k(e)););return e}function v(e,t){return v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},v(e,t)}function b(e,t){if(t&&("object"===d(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function k(e){return k=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},k(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=k(r);if(o){var n=k(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return b(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._image=t._popup.querySelector(".popup__image"),t._title=t._popup.querySelector(".popup__image-caption"),t}return t=u,(n=[{key:"open",value:function(e,t){y(k(u.prototype),"open",this).call(this),this._image.src=e,this._image.alt=t,this._image.title=t,this._title.textContent=t}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(i);function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var E=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._container=document.querySelector(n),this._renderer=r}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;this._renderedItems=e,this._renderedItems.forEach((function(e){t._renderer(e)}))}},{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"clear",value:function(){this._container.innerHTML=""}}])&&g(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var L=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(t),this._job=document.querySelector(n),this._avatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._userInfo={name:this._name.textContent,about:this._job.textContent,avatar:this._avatar.src},this._userInfo}},{key:"setUserInfo",value:function(e){e.name&&e.about&&e.avatar&&(this._name.textContent=e.name,this._job.textContent=e.about,this._avatar.src=e.avatar)}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_handleServerResponse",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getCards",value:function(){return this._cards=fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._handleServerResponse),this._cards}},{key:"getProfile",value:function(){return this._profileInfo=fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._handleServerResponse),this._profileInfo}},{key:"setProfile",value:function(e){return this._newProfile=fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.profileName,about:e.profileJob})}).then(this._handleServerResponse),this._newProfile}},{key:"setAvatar",value:function(e){return this._newAvatar=fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._handleServerResponse),this._newAvatar}},{key:"addLike",value:function(e){return this._like=fetch("".concat(this._baseUrl,"/cards/").concat(e._id,"/likes"),{method:"PUT",headers:this._headers}).then(this._handleServerResponse),this._like}},{key:"deleteLike",value:function(e){return this._deleteLike=fetch("".concat(this._baseUrl,"/cards/").concat(e._id,"/likes"),{method:"DELETE",headers:this._headers}).then(this._handleServerResponse),this._deleteLike}},{key:"addCard",value:function(e){return this._addedCard=fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleServerResponse),this._addedCard}},{key:"deleteCard",value:function(e){return this._deletedCard=fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._handleServerResponse),this._deletedCard}}])&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function P(e){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(){return B="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=q(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},B.apply(this,arguments)}function q(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=T(e)););return e}function I(e,t){return I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},I(e,t)}function R(e,t){if(t&&("object"===P(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function T(e){return T=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},T(e)}var x,A=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&I(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=T(r);if(o){var n=T(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return R(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._form=n._popup.querySelector(".popup__form"),n._submitHandler=t,n}return t=u,(n=[{key:"open",value:function(e){this._card=e,B(T(u.prototype),"open",this).call(this)}},{key:"setEventListeners",value:function(){var e=this;B(T(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler(e._card),e.close()}))}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(i),U=document.querySelector(".profile__button-edit"),D=document.querySelector(".profile__button-add"),V=(document.querySelector("#formProfileEdit"),document.querySelector(".popup__input_user_name")),H=document.querySelector(".popup__input_user_job"),N=(document.querySelector(".profile__name"),document.querySelector(".profile__job"),document.querySelector(".profile__avatar"),document.querySelector(".profile__avatar-edit")),J=(document.querySelector("#editAvatarForm"),document.querySelector(".elements"),document.querySelector("#formAddPlace"),document.querySelector(".popup__input_place_name"),document.querySelector(".popup__input_place_link"),document.querySelector("#btnPopupAddPlaceSubmit"),"#popupElement"),F=(document.querySelector(J).querySelector(".popup__image"),document.querySelector(J).querySelector(".popup__image-caption"),document.querySelector(".page"),Array.from(document.querySelectorAll(".popup")),document.querySelectorAll(".popup__close"),document.querySelectorAll(".element__image"),{}),M={formSelector:".popup__form",inputSelector:".popup__input",inputFieldSet:".popup__fieldset",submitButtonSelector:".popup__submit",inactiveButtonClass:"popup__submit_invalid",inputErrorClass:"popup__field-error_type",errorClass:"popup__field-error_active"},z=new C({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-47",headers:{authorization:"7a2b5691-9c91-496f-b370-fd3cc1ce7210","Content-Type":"application/json"}}),G=new S("#popupElement");G.setEventListeners();var K=function(e,t){G.open(e,t)},Q=function(e){var n=new t({name:e.name,link:e.link,cardId:e._id,likes:e.likes,userId:x,ownerId:e.owner._id},"#element-template",K,(function(){return Y.open(n)}),(function(){return z.addLike(e).then((function(e){n.setLikesCount(e),n.addLike()})).catch((function(e){console.log("Ошибка: "+e)}))}),(function(){return z.deleteLike(e).then((function(e){n.setLikesCount(e),n.removeLike()}))}));return n.createCardElement()},W=new E({renderer:function(e){W.addItem(Q(e))}},".elements"),X=new h("#popupAddPlace",(function(e){return X.showLoadingButtonText(!0),z.addCard(e).then((function(e){W.addItem(Q(e)),X.close()})).catch((function(e){console.log("Ошибка: "+e)}))}));X.setEventListeners();var Y=new A("#popupConfirmDeletePlace",(function(e){return z.deleteCard(e._cardId).then((function(){e._deleteCard(),Y.close()})).catch((function(e){return console.log("Ошибка: "+e)}))}));Y.setEventListeners();var Z=new L(".profile__name",".profile__job",".profile__avatar"),$=new h("#popupProfile",(function(e){return $.showLoadingButtonText(!0),z.setProfile(e).then((function(e){Z.setUserInfo(e),$.close()})).catch((function(e){return console.log("Ошибка: "+e)}))}));$.setEventListeners();var ee=new h(".popup_edit-avatar",(function(e){return ee.showLoadingButtonText(!0),z.setAvatar(e).then((function(e){Z.setUserInfo(e),ee.close()})).catch((function(e){console.log("Ошибка: "+e)}))}));ee.setEventListeners(),Promise.all([z.getCards(),z.getProfile()]).then((function(e){x=e[1]._id,W.renderItems(e[0].reverse()),Z.setUserInfo(e[1])})).catch((function(e){console.log("Ошибка: "+e)})),U.addEventListener("click",(function(){var e=Z.getUserInfo();V.value=e.name,H.value=e.about,F.profileEdit.resetValidation(),$.showLoadingButtonText(!1),$.open()})),D.addEventListener("click",(function(){F.addPlace.resetValidation(),X.showLoadingButtonText(!1),X.open()})),N.addEventListener("click",(function(){F.editAvatar.resetValidation(),ee.showLoadingButtonText(!1),ee.open()})),Array.from(document.querySelectorAll(M.formSelector)).forEach((function(e){var t=new r(M,e),n=e.getAttribute("name");F[n]=t,t.enableValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,