(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r,o,i,u){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e.name,this._link=e.link,this._cardSelector=n,this._userId=e.userId,this._ownerId=e.ownerId,this._cardId=e.cardId,this._likes=e.likes,this._handleCardClick=r,this._handleLikeAdd=i,this._handleRemoveLike=u}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".element").cloneNode(!0)}},{key:"createCardElement",value:function(){return this._element=this._getTemplate(),this._imgElement=this._element.querySelector(".element__image"),this._titleElement=this._element.querySelector(".element__title"),this._likeButton=this._element.querySelector(".element__button-like"),this._deleteButton=this._element.querySelector(".element__button-delete"),this._likesCount=this._element.querySelector(".element__likes-count"),this._imgElement.src=this._link,this._imgElement.alt=this._name,this._imgElement.title=this._name,this._titleElement.textContent=this._name,this._likesCount.textContent="".concat(this._likes.length),this._setEventListeners(),this._handleLikeState(),this.handleDeleteButtonState(),this._element}},{key:"_setEventListeners",value:function(){var e=this;this._likeButton=this._element.querySelector(".element__button-like"),this._deleteButton=this._element.querySelector(".element__button-delete"),this._imgElement.addEventListener("click",(function(){e._handleCardClick(e._link,e._name)})),this._likeButton.addEventListener("click",(function(){e._likeButton.classList.contains("element__button-like_active")?e._handleRemoveLike():e._handleLikeAdd()})),this._deleteButton.addEventListener("click",(function(){e._deleteCard()}))}},{key:"_handleLikeState",value:function(){var e=this;this._likes.forEach((function(t){t._id===e._userId?e.addLike():e.removeLike()}))}},{key:"handleDeleteButtonState",value:function(){this._userId!==this._ownerId&&(this._deleteButton.remove(),this._deleteButton=null)}},{key:"setLikesCount",value:function(e){this._likesCount.textContent="".concat(e._likes.length),console.log("setLikesCount: "+e._likes.length)}},{key:"addLike",value:function(){this._likeButton.classList.add("element__button-like_active")}},{key:"removeLike",value:function(){this._likeButton.classList.remove("element__button-like_active")}},{key:"_deleteCard",value:function(){this._element.remove(),this._element=null}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._form=n,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._submitButton=this._form.querySelector(this._submitButtonSelector)}var t,r;return t=e,(r=[{key:"_getErrorElement",value:function(e){return this._errorElement=this._form.querySelector(".".concat(e.id,"-error")),this._errorElement}},{key:"_showInputError",value:function(e){this._getErrorElement(e),e.classList.add(this._inputErrorClass),this._errorElement.classList.add(this._errorClass),this._errorElement.textContent=e.validationMessage}},{key:"_hideInputError",value:function(e){this._getErrorElement(e),this._errorElement&&(e.classList.remove(this._inputErrorClass),this._errorElement.classList.remove(this._errorClass),this._errorElement.textContent="")}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}},{key:"_checkFormValidity",value:function(){var e=this;this._inputList.forEach((function(t){console.log("_checkFormValidity - inputElement: ".concat(t));var n={input:t,errorElement:e._form.querySelector(".".concat(t.id,"-error"))};n.addEventListener("input",(function(){e._checkInputValidity(n),e._toggleSubmitButtonState()}))}))}},{key:"_toggleSubmitButtonState",value:function(){this._hasInvalidInput()?this.deactivateSubmitButton():this.activateSubmitButton()}},{key:"activateSubmitButton",value:function(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}},{key:"deactivateSubmitButton",value:function(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}},{key:"_setEventListeners",value:function(){var e=this;this._toggleSubmitButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e._toggleSubmitButtonState()}))}))}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"resetValidation",value:function(){var e=this;this._toggleSubmitButtonState(),this._inputList.forEach((function(t){e._hideInputError(t)}))}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){return e.preventDefault()})),this._setEventListeners()}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleCloseByEsc=this._handleCloseByEsc.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleCloseByEsc)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleCloseByEsc)}},{key:"_handleCloseByEsc",value:function(e){"Escape"===e.key&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target===t.currentTarget||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(){return c="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=l(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},c.apply(this,arguments)}function l(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=p(e)););return e}function s(e,t){return s=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},s(e,t)}function f(e,t){if(t&&("object"===u(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function p(e){return p=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},p(e)}var h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=p(r);if(o){var n=p(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return f(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._submitHandler=t,n._form=n._popup.querySelector(".popup__form"),n._inputList=Array.from(n._popup.querySelectorAll(".popup__input")),n._submitButton=n._popup.querySelector(".popup__submit"),n}return t=u,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputList.forEach((function(t){return e._formValues[t.name]=t.value})),this._formValues}},{key:"setEventListeners",value:function(){var e=this;c(p(u.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler(e._getInputValues())}))}},{key:"close",value:function(){c(p(u.prototype),"close",this).call(this),this._form.reset()}},{key:"handleButtonText",value:function(e){this._submitButton.textContent=e?"Сохранение...":"Сохранить"}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(i);function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(){return y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=m(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},y.apply(this,arguments)}function m(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=k(e)););return e}function v(e,t){return v=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},v(e,t)}function b(e,t){if(t&&("object"===d(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function k(e){return k=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},k(e)}var S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=k(r);if(o){var n=k(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return b(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._image=t._popup.querySelector(".popup__image"),t._title=t._popup.querySelector(".popup__image-caption"),t}return t=u,(n=[{key:"open",value:function(e,t){y(k(u.prototype),"open",this).call(this),this._image.src=e,this._image.alt=t,this._image.title=t,this._title.textContent=t}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(i);function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var E=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._container=document.querySelector(n),this._renderer=r}var t,n;return t=e,(n=[{key:"renderItems",value:function(){var e=this;this._renderedItems.forEach((function(t){e._renderer(t),console.log("item: ".concat(t))}))}},{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"clear",value:function(){this._container.innerHTML=""}}])&&g(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var O=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(t),this._job=document.querySelector(n),this._avatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._userInfo={name:this._name.textContent,about:this._job.textContent,avatar:this._avatar.src},this._userInfo}},{key:"setUserInfo",value:function(e){e.profileName&&e.profileJob&&e.profileAvatar&&(this._name.textContent=e.name,this._job.textContent=e.about,this._avatar.src=e.avatar)}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"_handleServerResponse",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getCards",value:function(){return this._cards=fetch("".concat(this._baseUrl,"/cards"),{headers:this._headers}).then(this._handleServerResponse),this._cards}},{key:"getProfile",value:function(){return this._profileInfo=fetch("".concat(this._baseUrl,"/users/me"),{headers:this._headers}).then(this._handleServerResponse),this._profileInfo}},{key:"setProfile",value:function(e){return console.log("obj: ".concat(e.profileName,", ").concat(e.profileJob,",")),this._newProfile=fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.profileName,about:e.profileJob})}).then(this._handleServerResponse),this._newProfile}},{key:"setAvatar",value:function(e){return this._newAvatar=fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._handleServerResponse),console.log("setAvatar - _newAvatar: ".concat(this._newAvatar)),this._newAvatar}},{key:"addLike",value:function(e){return this._like=fetch("".concat(this._baseUrl,"/cards/").concat(e._id,"/likes"),{method:"PUT",headers:this._headers}).then(this._handleServerResponse),this._like}},{key:"deleteLike",value:function(e){return this._deleteLike=fetch("".concat(this._baseUrl,"/cards/").concat(e._id,"/likes"),{method:"DELETE",headers:this._headers}).then(this._handleServerResponse),this._deleteLike}},{key:"addCard",value:function(e){return this._addedCard=fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleServerResponse),this._addedCard}},{key:"deleteCard",value:function(e){return this._deletedCard=fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(this._handleServerResponse),this._deletedCard}}])&&L(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function P(e){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function B(){return B="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=q(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},B.apply(this,arguments)}function q(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=T(e)););return e}function I(e,t){return I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},I(e,t)}function R(e,t){if(t&&("object"===P(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function T(e){return T=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},T(e)}var A,x=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&I(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=T(r);if(o){var n=T(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return R(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._form=n._popup.querySelector(".popup__form"),n._submitHandler=t,n}return t=u,(n=[{key:"open",value:function(e){this._card=e,B(T(u.prototype),"open",this).call(this)}},{key:"setEventListeners",value:function(){var e=this;B(T(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandler(e._card)}))}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(i),U=document.querySelector(".profile__button-edit"),V=document.querySelector(".profile__button-add"),D=(document.querySelector("#formProfileEdit"),document.querySelector(".popup__input_user_name")),N=document.querySelector(".popup__input_user_job"),H=(document.querySelector(".profile__name"),document.querySelector(".profile__job"),document.querySelector(".profile__avatar"),document.querySelector(".profile__avatar-edit")),J=(document.querySelector("#editAvatarForm"),document.querySelector(".elements"),document.querySelector("#formAddPlace"),document.querySelector(".popup__input_place_name"),document.querySelector(".popup__input_place_link"),document.querySelector("#btnPopupAddPlaceSubmit"),"#popupElement"),F=(document.querySelector(J).querySelector(".popup__image"),document.querySelector(J).querySelector(".popup__image-caption"),document.querySelector(".page"),Array.from(document.querySelectorAll(".popup")),document.querySelectorAll(".popup__close"),document.querySelectorAll(".element__image"),{}),M={formSelector:".popup__form",inputSelector:".popup__input",inputFieldSet:".popup__fieldset",submitButtonSelector:".popup__submit",inactiveButtonClass:"popup__submit_invalid",inputErrorClass:"popup__field-error_type",errorClass:"popup__field-error_active"},z=new C({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-47",headers:{authorization:"7a2b5691-9c91-496f-b370-fd3cc1ce7210","Content-Type":"application/json"}}),G=new S("#popupElement");G.setEventListeners();var K=function(e,t){G.open(e,t)},Q=function(e){var n=new t({name:e.name,link:e.link,cardId:e._id,likes:e.likes,userId:A,ownerId:e.owner._id},"#element-template",K,(function(){return Y.open(n)}),(function(){return z.addLike(e).then((function(e){n.setLikesCount(e),n.addLike()})).catch((function(e){console.log("Ошибка: "+e)}))}),(function(){return z.deleteLike(e).then((function(e){n.setLikesCount(e),n.removeLike()}))}));return n.createCardElement()},W=new E({renderer:function(e){W.addItem(Q(e))}},".elements"),X=new h("#popupAddPlace",(function(e){return X.handleButtonText(!0),z.addCard(e).then((function(e){W.addItem(Q(e)),X.close()})).catch((function(e){console.log("Ошибка: "+e)}))}));X.setEventListeners();var Y=new x("#popupConfirmDeletePlace",Z);Y.setEventListeners();var Z=function(e){return z.deleteCard(e._cardId).then((function(){e.deleteCard(),Y.close()})).catch((function(e){return console.log("Ошибка: "+e)}))},$=new O(".profile__name",".profile__job",".profile__avatar"),ee=new h("#popupProfile",(function(e){return ee.handleButtonText(!0),console.log("userInfo: ".concat(e.profileName,", ").concat(e.profileJob)),z.setProfile(e).then((function(e){$.setUserInfo(e),ee.close()})).catch((function(e){return console.log("Ошибка: "+e)}))}));ee.setEventListeners();var te=new h(".popup_edit-avatar",(function(e){return te.handleButtonText(!0),z.setAvatar(e).then((function(e){$.setUserInfo(e),te.close()})).catch((function(e){console.log("Ошибка: "+e)}))}));te.setEventListeners(),Promise.all([z.getCards(),z.getProfile()]).then((function(e){A=e[1]._id,W.renderItems(e[0].reverse()),$.setUserInfo(e[1])})).catch((function(e){console.log("Ошибка: "+e)})),U.addEventListener("click",(function(){var e=$.getUserInfo();console.log(e),D.value=e.name,N.value=e.about,F.profileEdit.resetValidation(),ee.handleButtonText(!1),ee.open()})),V.addEventListener("click",(function(){F.addPlace.resetValidation(),X.handleButtonText(!1),X.open()})),H.addEventListener("click",(function(){F.editAvatar.resetValidation(),te.handleButtonText(!1),te.open()})),Array.from(document.querySelectorAll(M.formSelector)).forEach((function(e){var t=new r(M,e),n=e.getAttribute("name");F[n]=t,t.enableValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LG9CQUdabEMsUUFBUXlELElBQUksQ0FBQzFCLEVBQUkyQixXQUFZM0IsRUFBSTRCLGVBQzlCdEQsTUFBSyxTQUFDdkMsR0FDTGpHLEVBQVNpRyxFQUFNLEdBQUc5RCxJQUNsQjRJLEVBQWFnQixZQUFZOUYsRUFBTSxHQUFHK0YsV0FDbENWLEVBQVlHLFlBQVl4RixFQUFNLEdBQy9CLElBQ0EwRSxPQUFNLFNBQUNDLEdBQ05wSSxRQUFRQyxJQUFJLFdBQWFtSSxFQUMxQixJQWdCSG5CLEVBQVE1SCxpQkFBaUIsU0FBUyxXQUNoQyxJQUFNOEYsRUFBVzJELEVBQVlXLGNBQzdCekosUUFBUUMsSUFBSWtGLEdBQ1pnQyxFQUFVMUQsTUFBUTBCLEVBQVNoSSxLQUMzQmlLLEVBQVMzRCxNQUFRMEIsRUFBU0YsTUFDMUJzQyxFQUFBQSxZQUFBQSxrQkFDQXdCLEdBQWFMLGtCQUFpQixHQUM5QkssR0FBYWpCLE1BQ2QsSUFHRFosRUFBTzdILGlCQUFpQixTQUFTLFdBQy9Ca0ksRUFBQUEsU0FBQUEsa0JBQ0FrQixFQUFjQyxrQkFBaUIsR0FDL0JELEVBQWNYLE1BQ2YsSUFFRFQsRUFBY2hJLGlCQUFpQixTQUFTLFdBQ3RDa0ksRUFBQUEsV0FBQUEsa0JBQ0EyQixHQUFZUixrQkFBaUIsR0FDN0JRLEdBQVlwQixNQUNiLElBaENrQmxILE1BQU1DLEtBQUszQyxTQUFTNEMsaUJBQWlCVixFQUFlb0gsZUFDNUQvSCxTQUFRLFNBQUNZLEdBQ2hCLElBQU1xSixFQUFZLElBQUl2SixFQUFjQyxFQUFnQkMsR0FDOUNzSixFQUFXdEosRUFBWXVKLGFBQWEsUUFDMUNyQyxFQUFlb0MsR0FBWUQsRUFDM0JBLEVBQVVHLGtCQUNYLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcmFrdGlrdW0tbWVzdG8vLi9zcmMvY29tcG9uZW50cy9DYXJkLmpzIiwid2VicGFjazovL3ByYWt0aWt1bS1tZXN0by8uL3NyYy9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMiLCJ3ZWJwYWNrOi8vcHJha3Rpa3VtLW1lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vcHJha3Rpa3VtLW1lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoRm9ybS5qcyIsIndlYnBhY2s6Ly9wcmFrdGlrdW0tbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qcyIsIndlYnBhY2s6Ly9wcmFrdGlrdW0tbWVzdG8vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL3ByYWt0aWt1bS1tZXN0by8uL3NyYy9jb21wb25lbnRzL1VzZXJJbmZvLmpzIiwid2VicGFjazovL3ByYWt0aWt1bS1tZXN0by8uL3NyYy9jb21wb25lbnRzL0FwaS5qcyIsIndlYnBhY2s6Ly9wcmFrdGlrdW0tbWVzdG8vLi9zcmMvcGFnZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJha3Rpa3VtLW1lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoQ29uZmlybS5qcyIsIndlYnBhY2s6Ly9wcmFrdGlrdW0tbWVzdG8vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vICDQmtC70LDRgdGBINGB0L7Qt9C00LDQtdGCINC60LDRgNGC0L7Rh9C60YMg0YEg0YLQtdC60YHRgtC+0Lwg0Lgg0YHRgdGL0LvQutC+0Lkg0L3QsCDQuNC30L7QsdGA0LDQttC10L3QuNC1ICAvL1xuXG4vLyAg0JjQvNC/0L7RgNGC0LjRgNGD0LXQvCDQvdGD0LbQvdGL0LUg0YHQstC+0LnRgdGC0LLQsCDQuCDQvNC10YLQvtC00Ysg0LjQtyBpbmRleC5qcyAgLy9cbi8vIGltcG9ydCB7b3BlblBvcHVwLCBwb3B1cEVsZW1lbnQsIHBvcHVwSW1hZ2UsIHBvcHVwSW1hZ2VDYXB0aW9ufSBmcm9tICcuL2luZGV4LmpzJyAvL1xuXG4vLyAg0J7RgtC60YDRi9Cy0LDQtdC8INGN0LrRgdC/0L7RgNGCINC60LvQsNGB0YHQsCDRgdC+INCy0YHQtdC80Lgg0L/QvtC70Y/QvNC4INC00LvRjyDQuNC80L/QvtGA0YLQsCAgLy9cbi8vICDQutC+0L3RgdGC0YDRg9C60YLQvtGAINC/0YDQuNC90LjQvNCw0LXRgiDQtNCw0L3QvdGL0LUgY2FyZERhdGEg0Lgg0YHQtdC70LXQutGC0L7RgCDRiNCw0LHQu9C+0L3QsCAjZWxlbWVudC10ZW1wbGF0ZSAgLy9cbi8vICBjYXJkRGF0YSDRgdC+0LTQtdGA0LbQuNGCINGB0YHRi9C70LrRgyDQuCDQvdCw0LfQstCw0L3QuNC1INC80LXRgdGC0LAgIC8vXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJkIHtcbiAgICBjb25zdHJ1Y3RvcihjYXJkRGF0YSwgY2FyZFNlbGVjdG9yLCBoYW5kbGVDYXJkQ2xpY2ssIGhhbmRsZURlbGV0ZUNhcmQsIGhhbmRsZUxpa2UsIGhhbmRsZVJlbW92ZUxpa2UpIHtcbiAgICB0aGlzLl9uYW1lID0gY2FyZERhdGEubmFtZTtcbiAgICB0aGlzLl9saW5rID0gY2FyZERhdGEubGluaztcbiAgICB0aGlzLl9jYXJkU2VsZWN0b3IgPSBjYXJkU2VsZWN0b3I7XG4gICAgdGhpcy5fdXNlcklkID0gY2FyZERhdGEudXNlcklkO1xuICAgIHRoaXMuX293bmVySWQgPSBjYXJkRGF0YS5vd25lcklkO1xuICAgIHRoaXMuX2NhcmRJZCA9IGNhcmREYXRhLmNhcmRJZDtcbi8vICAgIHRoaXMuX2lzTGlrZWQgPSBmYWxzZTsgIC8vXG4gICAgdGhpcy5fbGlrZXMgPSBjYXJkRGF0YS5saWtlcztcbiAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sgPSBoYW5kbGVDYXJkQ2xpY2s7XG4gICAgdGhpcy5faGFuZGxlTGlrZUFkZCA9IGhhbmRsZUxpa2U7XG4gICAgdGhpcy5faGFuZGxlUmVtb3ZlTGlrZSA9IGhhbmRsZVJlbW92ZUxpa2U7XG4gIH1cblxuICAvLyAg0LzQtdGC0L7QtNGLINC00LvRjyDRgNCw0LHQvtGC0Ysg0YEg0YDQsNC30LzQtdGC0LrQvtC5LCDRg9GB0YLQsNC90L7QstC60Lgg0YHQu9GD0YjQsNGC0LXQu9C10Lkg0YHQvtCx0YvRgtC40LkgIC8vXG4gIFxuICAvLyAg0L/RgNC40LLQsNGC0L3Ri9C5IChfZ2V0VGVtcGxhdGUpINC60LvQvtC90LjRgNGD0LXRgiDQuNC3INGI0LDQsdC70L7QvdCwINC4INCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINCz0L7RgtC+0LLRg9GOINC60LDRgNGC0L7Rh9C60YMgKGNhcmRFbGVtZW50KSAgLy9cbiAgX2dldFRlbXBsYXRlKCkge1xuICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcikuY29udGVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudCcpLmNsb25lTm9kZSh0cnVlKTtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIC8vICDQv9GD0LHQu9C40YfQvdGL0LkgKGNyZWF0ZUNhcmRFbGVtZW50KSDQtNC+0LHQsNCy0LvRj9C10YIg0LTQsNC90L3Ri9C1LCDRgdC70YPRiNCw0YLQtdC70LXQuSwg0LLQvtC30LLRgNCw0YnQsNC10YIg0LPQvtGC0L7QstGD0Y4g0LrQsNGA0YLQvtGH0LrRgyAgLy9cbiAgLy8gINC00L7QsdCw0LLQu9GP0LXQvCDQvtCx0YDQsNCx0L7RgtC60YMg0YHRh9C10YLRh9C40LrQsCDQu9Cw0LnQutC+0LIsINGB0YLQsNGC0YPRgSDQtNC+0YHRgtGD0L/QvdC+0YHRgtC4INGD0LTQsNC70LXQvdC40Y8gKNGB0LLQvtC10LkpINC60LDRgNGC0L7Rh9C60LggIC8vXG4gIGNyZWF0ZUNhcmRFbGVtZW50KCkge1xuICAgIHRoaXMuX2VsZW1lbnQgPSB0aGlzLl9nZXRUZW1wbGF0ZSgpO1xuICAgIHRoaXMuX2ltZ0VsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19pbWFnZScpO1xuICAgIHRoaXMuX3RpdGxlRWxlbWVudCA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX3RpdGxlJyk7XG4gICAgdGhpcy5fbGlrZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcihcIi5lbGVtZW50X19idXR0b24tbGlrZVwiKTtcbiAgICB0aGlzLl9kZWxldGVCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZWxlbWVudF9fYnV0dG9uLWRlbGV0ZVwiKTtcbiAgICB0aGlzLl9saWtlc0NvdW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKFwiLmVsZW1lbnRfX2xpa2VzLWNvdW50XCIpO1xuICAgIHRoaXMuX2ltZ0VsZW1lbnQuc3JjID0gdGhpcy5fbGluaztcbiAgICB0aGlzLl9pbWdFbGVtZW50LmFsdCA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy5faW1nRWxlbWVudC50aXRsZSA9IHRoaXMuX25hbWU7XG4gICAgdGhpcy5fdGl0bGVFbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5fbmFtZTtcbiAgICB0aGlzLl9saWtlc0NvdW50LnRleHRDb250ZW50ID0gYCR7dGhpcy5fbGlrZXMubGVuZ3RofWA7XG4gICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl9oYW5kbGVMaWtlU3RhdGUoKTtcbiAgICB0aGlzLmhhbmRsZURlbGV0ZUJ1dHRvblN0YXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gIH1cblxuICAvLyDQv9GA0LjQstCw0YLQvdGL0LkgKF9zZXRFdmVudExpc3RlbmVycykg0YHQu9GD0YjQsNC10YIg0LrQu9C40LrQuCDQv9C+INC40LrQvtC90LrQsNC8IFwi0YHQtdGA0LTQtdGH0LrQvlwiINC4IFwi0LrQvtGA0LfQuNC90LBcIiAgLy9cbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMuX2xpa2VCdXR0b24gPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50X19idXR0b24tbGlrZScpO1xuICAgIHRoaXMuX2RlbGV0ZUJ1dHRvbiA9IHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRfX2J1dHRvbi1kZWxldGUnKTtcblxuICAgIHRoaXMuX2ltZ0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sodGhpcy5fbGluaywgdGhpcy5fbmFtZSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9saWtlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgdGhpcy5fbGlrZUJ1dHRvbi5jbGFzc0xpc3QuY29udGFpbnMoXCJlbGVtZW50X19idXR0b24tbGlrZV9hY3RpdmVcIilcbiAgICAgICAgPyB0aGlzLl9oYW5kbGVSZW1vdmVMaWtlKClcbiAgICAgICAgOiB0aGlzLl9oYW5kbGVMaWtlQWRkKCk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9kZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICB0aGlzLl9kZWxldGVDYXJkKCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyAg0L/RgNC40LLQsNGC0L3Ri9C5IC0g0LTQvtCx0LDQstC70Y/QtdGCINC70LDQudC6INC/0YDQuCDQutC70LjQutC1LCDQtdGB0LvQuCAgKNCy0LrQuy4v0LLRi9C60LsuKSDQv9GA0Lgg0LrQu9C40LrQtSDQvdCwINGB0LXRgNC00LXRh9C60L4gIC8vICBcbiAgX2hhbmRsZUxpa2VTdGF0ZSgpIHtcbiAgICB0aGlzLl9saWtlcy5mb3JFYWNoKCh1c2VyKSA9PiB7XG4vKiAgICAgIGNvbnNvbGUubG9nKGBDYXJkIF9oYW5kbGVMaWtlU3RhdGUgLSB1c2VyOiAke3VzZXIuX2lkfWApOyAqL1xuICAgICAgaWYgKHVzZXIuX2lkID09PSB0aGlzLl91c2VySWQpIHtcbiAgICAgICAgdGhpcy5hZGRMaWtlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZUxpa2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vINC/0YPQsdC70LjRh9C90YvQuSDRg9C00LDQu9GP0LXRgiDQuNC60L7QvdC60YMg0YPQtNCw0LvQtdC90LjRjywg0LXRgdC70Lgg0LrQsNGA0YLQvtGH0LrQsCDRgdC+0LfQtNCw0L3QsCDQtNGA0YPQs9C40Lwg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9C10LwgKCE9PXRoaXMuX293bmVySWQpICAvL1xuICBoYW5kbGVEZWxldGVCdXR0b25TdGF0ZSgpIHtcbiAgICBpZiAodGhpcy5fdXNlcklkICE9PSB0aGlzLl9vd25lcklkKSB7XG4gICAgICB0aGlzLl9kZWxldGVCdXR0b24ucmVtb3ZlKCk7XG4gICAgICB0aGlzLl9kZWxldGVCdXR0b24gPSBudWxsO1xuICAgIH1cbiAgfVxuICBcbiAgLy8gINC/0YDQuNCy0LDRgtC90YvQuSAoX2xpa2VDYXJkKSDQvNC10L3Rj9C10YIg0YHQvtGB0YLQvtGP0L3QuNC1INC70LDQudC60LAgKNCy0LrQuy4v0LLRi9C60LsuKSDQv9GA0Lgg0LrQu9C40LrQtSDQvdCwINGB0LXRgNC00LXRh9C60L4gIC8vXG4gLyogX2xpa2VDYXJkKCkge1xuICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LnRvZ2dsZSgnZWxlbWVudF9fYnV0dG9uLWxpa2VfYWN0aXZlJyk7XG4gICAgdGhpcy5faXNMaWtlZCA9ICF0aGlzLl9pc0xpa2VkO1xuICB9XG4gICovXG5cbi8vICDRg9GB0LvQvtC20L3Rj9C10Lwg0L7QsdGA0LDQsdC+0YLQutGDIC0g0YPRh9C40YLRi9Cy0LDQtdC8INC70LDQudC60Lgg0YDQsNC30L3Ri9GFINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvQtdC5LCDQvtGC0L7QsdGA0LDQttCw0LXQvCDRgdGH0LXRgtGH0LjQuiDQu9Cw0LnQutC+0LIgIC8vIFxuXG4gIC8vICDQktGL0LLQvtC00LjQvCDRgdGH0LXRgtGH0LjQuiDQutC70LjQutC+0LIgIC8vXG4gIHNldExpa2VzQ291bnQocmVzKSB7XG4gICAgdGhpcy5fbGlrZXNDb3VudC50ZXh0Q29udGVudCA9IGAke3Jlcy5fbGlrZXMubGVuZ3RofWA7XG4gICAgY29uc29sZS5sb2coJ3NldExpa2VzQ291bnQ6ICcgKyByZXMuX2xpa2VzLmxlbmd0aCk7XG4gIH1cblxuICAvLyAg0JfQsNC60YDQsNGI0LjQstCw0LXQvCDRgdC10YDQtNC10YfQutC+INC/0L7RgdC70LUg0LvQsNC50LrQsCAgLy9cbiAgYWRkTGlrZSgpIHtcbiAgICB0aGlzLl9saWtlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJlbGVtZW50X19idXR0b24tbGlrZV9hY3RpdmVcIik7XG4gIH1cblxuICAvLyAg0JTQtdC70LDQtdC8INGB0LXRgNC00LXRh9C60L4g0LHQtdC70YvQvCDQv9C+0YHQu9C1INC/0L7QstGC0L7RgNC90L7Qs9C+INC60LvQuNC60LAgPSBkaXNsaWtlICAvL1xuICByZW1vdmVMaWtlKCkge1xuICAgIHRoaXMuX2xpa2VCdXR0b24uY2xhc3NMaXN0LnJlbW92ZShcImVsZW1lbnRfX2J1dHRvbi1saWtlX2FjdGl2ZVwiKTtcbiAgfVxuICBcbiAgLy8g0L/RgNC40LLQsNGC0L3Ri9C5IChfZGVsZXRlQ2FyZCkg0YPQtNCw0LvRj9C10YIg0LrQsNGA0YLQvtGH0LrRgyDQuNC3IERPTSDQv9GA0Lgg0LrQu9C40LrQtSDQvdCwINC60L7RgNC30LjQvdC60YMgIC8vXG4gIF9kZWxldGVDYXJkKCkgeyAgXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcbiAgICB0aGlzLl9lbGVtZW50ID0gbnVsbDtcbiAgfVxufSIsIi8vICDQv9C+0LrQsCDQvdC1INC40LzQv9C+0YDRgtC40YDRg9C10LwgaW1wb3J0IHsgdmFsaWRhdGVDb25maWcgfSBmcm9tIFwiLi9jb25zdGFudHMuanNcIjsgIC8vXG4vLyAg0LrQu9Cw0YHRgSBGb3JtVmFsaWRhdG9yINC90LDRgdGC0YDQsNC40LLQsNC10YIg0LLQsNC70LjQtNCw0YbQuNGOINC/0L7Qu9C10Lkg0YTQvtGA0LzRiyAgLy9cbi8vICDQv9GA0LjQvdC40LzQsNC10YIg0LIg0LrQvtC90YHRgtGA0YPQutGC0L7RgCDQvtCx0YrQtdC60YIg0L3QsNGB0YLRgNC+0LXQuiDRgSDRgdC10LvQtdC60YLQvtGA0LDQvNC4INC4INC60LvQsNGB0YHQsNC80Lgg0YTQvtGA0LzRiyAgLy9cbi8vICDQv9GA0LjQvdC40LzQsNC10YIg0LLRgtC+0YDRi9C8INC/0LDRgNCw0LzQtdGC0YDQvtC8INGN0LvQtdC80LXQvdGCINGC0L7QuSDRhNC+0YDQvNGLLCDQutC+0YLQvtGA0LDRjyDQstCw0LvQuNC00LjRgNGD0LXRgtGB0Y8gIC8vXG4vLyAg0LjQvNC10LXRgiDQv9GA0LjQstCw0YLQvdGL0LUg0LzQtdGC0L7QtNGLINC00LvRjyDQvtCx0YDQsNCx0L7RgtC60Lgg0YTQvtGA0LzRgzog0L/RgNC+0LLQtdGA0LrQsCDQstCw0LvQuNC00L3QvtGB0YLQuCwg0LLQutC7Li/QstGL0LrQuy4g0LrQvdC+0L/QutC4LCDRg9GB0YLQsNC90L7QstC60LAg0L7QsdGA0LDQsdC+0YLRh9C40LrQvtCyICAvL1xuLy8gINC40LzQtdC10YIg0L/Rg9Cx0LvQuNGH0L3Ri9C5INC80LXRgtC+0LQgZW5hYmxlVmFsaWRhdGlvbiwg0LrQvtGC0L7RgNGL0Lkg0LLQutC70Y7Rh9Cw0LXRgiDQstCw0LvQuNC00LDRhtC40Y4g0YTQvtGA0LzRiyAgLy9cbi8vICDQtNC70Y8g0LrQsNC20LTQvtC5INC/0YDQvtCy0LXRgNGP0LXQvNC+0Lkg0YTQvtGA0LzRiyDRgdC+0LfQtNCw0LXQvCDRjdC60LfQtdC80L/Qu9GP0YAg0LrQu9Cw0YHRgdCwIEZvcm1WYWxpZGF0b3Ig0LIgaW5kZXguanMgIC8vXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGb3JtVmFsaWRhdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWxpZGF0ZUNvbmZpZywgZm9ybUVsZW1lbnQpIHtcbiAgICAgIHRoaXMuX2Zvcm0gPSBmb3JtRWxlbWVudDtcbiAgICAgIHRoaXMuX2lucHV0U2VsZWN0b3IgPSB2YWxpZGF0ZUNvbmZpZy5pbnB1dFNlbGVjdG9yO1xuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSB2YWxpZGF0ZUNvbmZpZy5zdWJtaXRCdXR0b25TZWxlY3RvcjtcbiAgICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20odGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuX2lucHV0U2VsZWN0b3IpKTtcbiAgICAgIHRoaXMuX2luYWN0aXZlQnV0dG9uQ2xhc3MgPSB2YWxpZGF0ZUNvbmZpZy5pbmFjdGl2ZUJ1dHRvbkNsYXNzO1xuICAgICAgdGhpcy5faW5wdXRFcnJvckNsYXNzID0gdmFsaWRhdGVDb25maWcuaW5wdXRFcnJvckNsYXNzO1xuICAgICAgdGhpcy5fZXJyb3JDbGFzcyA9IHZhbGlkYXRlQ29uZmlnLmVycm9yQ2xhc3M7XG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9mb3JtLnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xuICAgIH07XG5cbiAgICAvLyAg0L/RgNC40LLQsNGC0L3Ri9C5INC00LvRjyDQv9C+0LjRgdC60LAg0L/QvtC70Y8g0LLQstC+0LTQsCDRgSDQvtGI0LjQsdC60L7QuSAgLy8gICAgIFxuICAgIF9nZXRFcnJvckVsZW1lbnQoaW5wdXRPYmopIHtcbiAgICAgIHRoaXMuX2Vycm9yRWxlbWVudCA9IHRoaXMuX2Zvcm0ucXVlcnlTZWxlY3RvcihgLiR7aW5wdXRPYmouaWR9LWVycm9yYCk7XG4gICAgICByZXR1cm4gdGhpcy5fZXJyb3JFbGVtZW50O1xuICAgIH07XG5cbiAgICAvLyAg0L/RgNC40LLQsNGC0L3Ri9C5INC00LvRjyDQv9C+0LrQsNC30LAg0YHQv9Cw0L3QsCDRgSDQvtGI0LjQsdC60L7QuSDQv9GA0Lgg0L3QtdCy0LDQu9C40LTQvdC+0Lwg0LjQvdC/0YPRgtC1ICAvL1xuICAgIF9zaG93SW5wdXRFcnJvcihpbnB1dE9iaikge1xuICAgICAgICB0aGlzLl9nZXRFcnJvckVsZW1lbnQoaW5wdXRPYmopOyBcbiAgICAgICAgaW5wdXRPYmouY2xhc3NMaXN0LmFkZCh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xuICAgICAgICB0aGlzLl9lcnJvckVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9lcnJvckNsYXNzKTsgXG4gICAgICAgIHRoaXMuX2Vycm9yRWxlbWVudC50ZXh0Q29udGVudCA9IGlucHV0T2JqLnZhbGlkYXRpb25NZXNzYWdlO1xuICAgIH07XG4gICAgXG4gICAgLy8gINC/0YDQuNCy0LDRgtC90YvQuSDQtNC70Y8g0YHQutGA0YvRgtC40Y8g0YHQv9Cw0L3QsCDRgSDQvtGI0LjQsdC60L7QuSDQv9GA0Lgg0L3QtdCy0LDQu9C40LTQvdC+0Lwg0LjQvdC/0YPRgtC1ICAvL1xuICAgIF9oaWRlSW5wdXRFcnJvcihpbnB1dE9iaikge1xuICAgICAgICB0aGlzLl9nZXRFcnJvckVsZW1lbnQoaW5wdXRPYmopO1xuICAgICAgICBpZiAoIXRoaXMuX2Vycm9yRWxlbWVudCkgcmV0dXJuO1xuICAgICAgICBpbnB1dE9iai5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2lucHV0RXJyb3JDbGFzcyk7XG4gICAgICAgIHRoaXMuX2Vycm9yRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuX2Vycm9yQ2xhc3MpO1xuICAgICAgICB0aGlzLl9lcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSAnJztcbiAgICB9O1xuXG4gICAgLy8gINC/0YDQuNCy0LDRgtC90YvQuSDQtNC70Y8g0L/RgNC+0LLQtdGA0LrQuCDQstCw0LvQuNC00L3QvtGB0YLQuCDQutCw0LbQtNC+0LPQviDQuNC90L/Rg9GC0LAg0Lgg0L/QvtC60LDQt9CwINC+0YjQuNCx0L7QuiAgLy9cbiAgICBfY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0T2JqKSB7XG4gICAgICAgIGlmICghaW5wdXRPYmoudmFsaWRpdHkudmFsaWQpIHtcbiAgICAgICAgICB0aGlzLl9zaG93SW5wdXRFcnJvcihpbnB1dE9iaik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRPYmopO1xuICAgICAgICB9O1xuICAgIH07XG4gIFxuICAgIC8vICDQv9GA0LjQstCw0YLQvdGL0Lkg0LTQu9GPINCy0LDQu9C40LTQsNGG0LjQuCDRhNC+0YDQvNGLICAvL1xuICAgIC8vICDQtNC70Y8g0LrQsNC20LTQvtCz0L4g0LjQvdC/0YPRgtCwINCyINGE0L7RgNC80LUg0YHQvtC30LTQsNC10Lwg0L7QsdGK0LXQutGCINC4INCy0LXRiNCw0LXQvCDRgdC70YPRiNCw0YLQtdC70Lgg0LLQstC+0LTQsCAgLy9cbiAgICBcbiAgICBfY2hlY2tGb3JtVmFsaWRpdHkoKSB7XG4gICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBfY2hlY2tGb3JtVmFsaWRpdHkgLSBpbnB1dEVsZW1lbnQ6ICR7aW5wdXRFbGVtZW50fWApO1xuICAgICAgICBjb25zdCBpbnB1dE9iaiA9IHtcbiAgICAgICAgICBpbnB1dDogaW5wdXRFbGVtZW50LFxuICAgICAgICAgIGVycm9yRWxlbWVudDogdGhpcy5fZm9ybS5xdWVyeVNlbGVjdG9yKGAuJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYClcbiAgICAgICAgfTtcbiAgICAgICAgaW5wdXRPYmouYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fY2hlY2tJbnB1dFZhbGlkaXR5KGlucHV0T2JqKTtcbiAgICAgICAgICB0aGlzLl90b2dnbGVTdWJtaXRCdXR0b25TdGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH07XG4gIFxuICAgIC8vICDQv9GA0LjQstCw0YLQvdGL0Lkg0LTQu9GPINC/0LXRgNC10LrQu9GO0YfQtdC90LjRjyDRgdC+0YHRgtC+0Y/QvdC40LUg0LrQvdC+0L/QutC4INGB0L7RhdGA0LXQvdC10L3QuNGPICjQstC60LsuL9Cy0YvQutC7LikgIC8vXG4gICAgX3RvZ2dsZVN1Ym1pdEJ1dHRvblN0YXRlKCkge1xuICAgICAgaWYgKHRoaXMuX2hhc0ludmFsaWRJbnB1dCgpKVxuICAgICAgICB0aGlzLmRlYWN0aXZhdGVTdWJtaXRCdXR0b24oKTtcbiAgICAgIGVsc2VcbiAgICAgICAgdGhpcy5hY3RpdmF0ZVN1Ym1pdEJ1dHRvbigpO1xuICAgIH07XG4gIFxuICAgIC8vICDQv9GD0LHQu9C40YfQvdGL0Lkg0LTQu9GPINCy0LrQu9GO0YfQtdC90LjRjyAo0LvRjtCx0L7QuSkg0LrQvdC+0L/QutC4ICAvL1xuICAgIGFjdGl2YXRlU3VibWl0QnV0dG9uKCkge1xuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB9O1xuICBcbiAgICAvLyAg0L/Rg9Cx0LvQuNGH0L3Ri9C5INC00LvRjyDQstGL0LrQu9GO0YfQtdC90LjRjyAo0LvRjtCx0L7QuSkg0LrQvdC+0L/QutC4ICAvL1xuICAgIGRlYWN0aXZhdGVTdWJtaXRCdXR0b24oKSB7XG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LmFkZCh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgfTtcblxuICAgIF9zZXRFdmVudExpc3RlbmVycygpIHtcbiAgICAgIHRoaXMuX3RvZ2dsZVN1Ym1pdEJ1dHRvblN0YXRlKCk7XG4gIFxuICAgICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0T2JqKSA9PiB7XG4gICAgICAgIGlucHV0T2JqLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX2NoZWNrSW5wdXRWYWxpZGl0eShpbnB1dE9iaik7XG4gICAgICAgICAgdGhpcy5fdG9nZ2xlU3VibWl0QnV0dG9uU3RhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIFxuICAgIC8vICDQv9GA0LjQstCw0YLQvdGL0Lkg0LTQu9GPINC/0YDQvtCy0LXRgNC60Lgg0L3QsCDQvdCw0LvQuNGH0LjQtSDQvdC10LrQvtGA0YDQtdC60YLQvdC+0LPQviDQuNC90L/Rg9GC0LAg0LIg0YTQvtGA0LzQtSAgLy9cbiAgICBfaGFzSW52YWxpZElucHV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5wdXRMaXN0LnNvbWUoKGlucHV0KSA9PiB7XG4gICAgICAgICAgcmV0dXJuICFpbnB1dC52YWxpZGl0eS52YWxpZDtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgICBcbiAgICAvLyDQv9GD0LHQu9C40YfQvdGL0Lkg0LTQu9GPINC/0LXRgNC10LfQsNC/0YPRgdC60LAg0LLQsNC70LjQtNCw0YbQuNC4ICAvL1xuICAgIHJlc2V0VmFsaWRhdGlvbigpIHtcbiAgICAgIHRoaXMuX3RvZ2dsZVN1Ym1pdEJ1dHRvblN0YXRlKCk7XG4vKiAgICAgIGNvbnNvbGUubG9nKGByZXNldFZhbGlkYXRpb24gLSB0aGlzOiAke3RoaXN9YCk7ICovXG4gICAgICB0aGlzLl9pbnB1dExpc3QuZm9yRWFjaCgoaW5wdXQpID0+IHtcbiAgICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vICDQv9GD0LHQu9C40YfQvdGL0Lkg0LTQu9GPINCy0LrQu9GO0YfQtdC90LjRjyDQstCw0LvQuNC00LDRhtC40Lgg0YTQvtGA0LwgIC8vXG4gICAgZW5hYmxlVmFsaWRhdGlvbigpIHtcbiAgICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgKGV2dCkgPT4gZXZ0LnByZXZlbnREZWZhdWx0KCkpO1xuICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcbiAgICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwIHtcbiAgICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgICB0aGlzLl9wb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBTZWxlY3Rvcik7XG4gICAgICB0aGlzLl9oYW5kbGVDbG9zZUJ5RXNjID0gdGhpcy5faGFuZGxlQ2xvc2VCeUVzYy5iaW5kKHRoaXMpO1xuICAgIH1cbiAgXG4gICAgb3BlbigpIHtcbiAgICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoJ3BvcHVwX29wZW5lZCcpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUNsb3NlQnlFc2MpO1xuICAgIH1cbiAgXG4gICAgY2xvc2UoKSB7XG4gICAgICB0aGlzLl9wb3B1cC5jbGFzc0xpc3QucmVtb3ZlKCdwb3B1cF9vcGVuZWQnKTtcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLl9oYW5kbGVDbG9zZUJ5RXNjKTtcbiAgICB9XG4gIFxuICAgIF9oYW5kbGVDbG9zZUJ5RXNjKGV2dCkge1xuICAgICAgaWYgKGV2dC5rZXkgPT09ICdFc2NhcGUnKSB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG4gIFxuICAgIHNldEV2ZW50TGlzdGVuZXJzKCkge1xuICAgICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKGV2dCkgPT4ge1xuICAgICAgICBpZiAoZXZ0LnRhcmdldCA9PT0gZXZ0LmN1cnJlbnRUYXJnZXQgfHwgZXZ0LnRhcmdldC5jbGFzc0xpc3QuY29udGFpbnMoJ3BvcHVwX19jbG9zZScpKSB7XG4gICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0iLCIvLyAg0JrQu9Cw0YHRgSBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAuICAvL1xuLy8gINCf0YDQuNC90LjQvNCw0LXRgiDQsiDQutC+0L3RgdGC0YDRg9C60YLQvtGAINC60L7Qu9Cx0Y3QuiDRgdCw0LHQvNC40YLQsCDRhNC+0YDQvNGLLCAgLy9cbiAgLy8gINGB0L7QtNC10YDQttC40YIg0L/RgNC40LLQsNGC0L3Ri9C5INC80LXRgtC+0LQgX2dldElucHV0VmFsdWVzICAvL1xuICAvLyAg0L/QtdGA0LXQt9Cw0L/QuNGB0YvQstCw0LXRgiDRgNC+0LTQuNGC0LXQu9GM0YHQutC40LUg0LzQtdGC0L7QtNGLIHNldEV2ZW50TGlzdGVuZXJzINC4IGNsb3NlLiAgLy9cbi8vICDQlNC70Y8g0LrQsNC20LTQvtCz0L4g0L/QvtC/0LDQv9CwINGB0L7Qt9C00LDRgtGMINGB0LLQvtC5INGN0LrQt9C10LzQv9C70Y/RgCDQutC70LDRgdGB0LAgUG9wdXBXaXRoRm9ybS4gIC8vXG5cbmltcG9ydCBQb3B1cCBmcm9tIFwiLi9Qb3B1cC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yLCBzdWJtaXRIYW5kbGVyKSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG4gICAgdGhpcy5fc3VibWl0SGFuZGxlciA9IHN1Ym1pdEhhbmRsZXI7XG4gICAgdGhpcy5fZm9ybSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fZm9ybScpO1xuICAgIHRoaXMuX2lucHV0TGlzdCA9IEFycmF5LmZyb20odGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwX19pbnB1dCcpKTtcbiAgICB0aGlzLl9zdWJtaXRCdXR0b24gPSB0aGlzLl9wb3B1cC5xdWVyeVNlbGVjdG9yKFwiLnBvcHVwX19zdWJtaXRcIik7ICAgIFxuICB9XG5cbiAgLy8gINC80LXRgtC+0LQg0LTQu9GPINC/0L7Qu9GD0YfQtdC90LjRjyDQuCDQstC+0LfQstGA0LDRidC10L3QuNGPINC00LDQvdC90YvRhSDRhNC+0YDQvNGLICAvL1xuICBfZ2V0SW5wdXRWYWx1ZXMoKSB7XG4gICAgdGhpcy5fZm9ybVZhbHVlcyA9IHt9O1xuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKFxuICAgICAgKGlucHV0KSA9PiAodGhpcy5fZm9ybVZhbHVlc1tpbnB1dC5uYW1lXSA9IGlucHV0LnZhbHVlKVxuICAgICk7XG4vKiAgICBjb25zb2xlLmxvZyhgUG9wdXBXaXRoRm9ybSBmb3JtVmFsdWVzOiAke3RoaXMuX2Zvcm1WYWx1ZXN9YCk7ICovXG4gICAgcmV0dXJuIHRoaXMuX2Zvcm1WYWx1ZXM7XG4gIH1cblxuICAvLyAg0L/QtdGA0LXQt9Cw0L/QuNGB0YvQstCw0LXQvCDRgNC+0LTQuNGC0LXQu9GM0YHQutC40LUg0LzQtdGC0L7QtNGLIHNldEV2ZW50TGlzdGVuZXJzINC4IGNsb3NlICAvL1xuICBzZXRFdmVudExpc3RlbmVycygpIHtcbiAgICBzdXBlci5zZXRFdmVudExpc3RlbmVycygpO1xuICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgKGV2dCkgPT4ge1xuICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0aGlzLl9zdWJtaXRIYW5kbGVyKHRoaXMuX2dldElucHV0VmFsdWVzKCkpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gINCy0YvQt9GL0LLQsNC10Lwg0YDQvtC00LjRgtC10LvRjNGB0LrQuNC5INC80LXRgtC+0LQg0LfQsNC60YDRi9GC0LjRjyDQuCDQvtGH0LjRidCw0LXQvCDRhNC+0YDQvNGDICAvL1xuICBjbG9zZSgpIHtcbiAgICBzdXBlci5jbG9zZSgpO1xuICAgIHRoaXMuX2Zvcm0ucmVzZXQoKTtcbiAgfVxuXG4gIC8vICDRg9C70YPRh9GI0LDQtdC8IFVYIC0g0L/QvtC60LDQt9GL0LLQsNC10Lwg0L3QsCDQutC90L7Qv9C60LUg0YLQtdC60YHRgiDQviDRgtC+0LwsINGH0YLQviDQuNC00LXRgiDRgdC+0YXRgNCw0L3QtdC90LjQtSDQtNCw0L3QvdGL0YUgIC8vXG4gIGhhbmRsZUJ1dHRvblRleHQoaXNMb2FkaW5nKSB7XG4gICAgaXNMb2FkaW5nXG4gICAgICA/ICh0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcItCh0L7RhdGA0LDQvdC10L3QuNC1Li4uXCIpXG4gICAgICA6ICh0aGlzLl9zdWJtaXRCdXR0b24udGV4dENvbnRlbnQgPSBcItCh0L7RhdGA0LDQvdC40YLRjFwiKTtcbiAgfTtcbn0iLCIvLyAg0JrQu9Cw0YHRgSBQb3B1cFdpdGhJbWFnZSBleHRlbmRzIFBvcHVwINC00LvRjyDQvtGC0LrRgNGL0YLQuNGPINC/0L7Qv9Cw0L/QsCDRgSDQutCw0YDRgtC+0YfQutC+0Lkg0LzQtdGB0YLQsCAgLy9cblxuXG5pbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aEltYWdlIGV4dGVuZHMgUG9wdXAge1xuICBjb25zdHJ1Y3Rvcihwb3B1cFNlbGVjdG9yKSB7XG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XG5cbiAgICB0aGlzLl9pbWFnZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW1hZ2UnKTtcbiAgICB0aGlzLl90aXRsZSA9IHRoaXMuX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW1hZ2UtY2FwdGlvbicpO1xuICB9XG5cbi8vICDQn9C10YDQtdC30LDQv9C40YHRi9Cy0LDRgtGMINGA0L7QtNC40YLQtdC70YzRgdC60LjQuSBvcGVuICjQstGB0YLQsNCy0LrQsCDQutCw0YDRgtC40L3QutC4INGB0L4g0YHRgdGL0LvQutC+0Lkg0Lgg0L/QvtC00L/QuNGB0YzRjikgIC8vXG4gIG9wZW4obGluaywgbmFtZSkge1xuICAgIHN1cGVyLm9wZW4oKTtcblxuICAgIHRoaXMuX2ltYWdlLnNyYyA9IGxpbms7XG4gICAgdGhpcy5faW1hZ2UuYWx0ID0gbmFtZTtcbiAgICB0aGlzLl9pbWFnZS50aXRsZSA9IG5hbWU7XG4gICAgdGhpcy5fdGl0bGUudGV4dENvbnRlbnQgPSBuYW1lO1xuICB9XG59IiwiLy8gINCa0LvQsNGB0YEgU2VjdGlvbiAo0L7RgtGA0LjRgdC+0LLQutCwINGN0LvQtdC80LXQvdGC0L7QsiDQvdCwINGB0YLRgNCw0L3QuNGG0LUpICAvL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWN0aW9uIHtcbi8qICAgIGNvbnN0cnVjdG9yKHsgaXRlbXMsIHJlbmRlcmVyIH0sIGNvbnRhaW5lcikgeyAqL1xuICAgIGNvbnN0cnVjdG9yKHsgcmVuZGVyZXIgfSwgY29udGFpbmVyKSB7XG4vKiAgICAgICAgdGhpcy5fcmVuZGVyZWRJdGVtcyA9IGl0ZW1zOyAqL1xuICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xuICAgICAgdGhpcy5fcmVuZGVyZXIgPSByZW5kZXJlcjtcbiAgICB9XG5cbi8vICDQntGC0YDQuNGB0L7QstGL0LLQsNC10Lwg0LjQvNC10Y7RidC40LXRgdGPINC60LDRgNGC0L7Rh9C60Lgg0LzQtdGB0YIgIC8vICAgIFxuICAgIHJlbmRlckl0ZW1zKCkge1xuICAgICAgdGhpcy5fcmVuZGVyZWRJdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xuICAgICAgICBjb25zb2xlLmxvZyhgaXRlbTogJHtpdGVtfWApO1xuICAgICAgfSk7XG4gICAgfTtcbiAgXG4vLyAg0J/Rg9Cx0LvQuNGH0L3Ri9C5IC0g0JLRgdGC0LDQstC70Y/QtdC8INC90L7QstGD0Y4g0LrQsNGA0YLQvtGH0LrRgyDQsiDRgNCw0LfQvNC10YLQutGDINCyINC90LDRh9Cw0LvQviDQs9Cw0LvQtdGA0LXQuCAgLy8gICAgXG4gICAgYWRkSXRlbShlbGVtZW50KSB7XG4gICAgICB0aGlzLl9jb250YWluZXIucHJlcGVuZChlbGVtZW50KTtcbiAgICB9XG5cbiAgLy8gINCf0YPQsdC70LjRh9C90YvQuSAtINCe0YfQuNGJ0LDQtdC8INCz0LDQu9C10YDQtdGOIC0g0L/QvtC60LAg0L3QtSDQvdGD0LbQvdC+ICAvL1xuICAgIGNsZWFyKCkge1xuICAgICAgdGhpcy5fY29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgIH07XG59IiwiLy8gINCa0LvQsNGB0YEgVXNlckluZm8uINCj0L/RgNCw0LLQu9C10L3QuNC1INC+0YLQvtCx0YDQsNC20LXQvdC40LXQvCDQuNC90YTQviDQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70LUg0Lgg0LDQstCw0YLQsNGAICAvL1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2VySW5mbyB7XG4gICAgY29uc3RydWN0b3IocHJvZmlsZU5hbWUsIHByb2ZpbGVKb2IsIHByb2ZpbGVBdmF0YXIpIHtcbi8qXG4gICAgICB0aGlzLl9uYW1lID0gcHJvZmlsZU5hbWU7XG4gICAgICB0aGlzLl9qb2IgPSBwcm9maWxlSm9iO1xuICAgICAgdGhpcy5fYXZhdGFyID0gcHJvZmlsZUF2YXRhcjtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuX25hbWUsIHRoaXMuX2pvYik7XG4qL1xuICAgICAgdGhpcy5fbmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJvZmlsZU5hbWUpO1xuICAgICAgdGhpcy5fam9iID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwcm9maWxlSm9iKTtcbiAgICAgIHRoaXMuX2F2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocHJvZmlsZUF2YXRhcik7XG5cbiAgICB9XG5cbiAvLyAg0JLQvtC30LLRgNCw0YnQsNC10Lwg0LTQsNC90L3Ri9C1INC/0YDQvtGE0LjQu9GPLCDQstGC0Ycg0YHRgdGL0LvQutGDINC90LAg0LDQstCw0YLQsNGAICAvLyAgICBcbiAgICBnZXRVc2VySW5mbygpIHsgICAgXG4gICAgICB0aGlzLl91c2VySW5mbyA9IHtcbiAgICAgICAgICBuYW1lOiB0aGlzLl9uYW1lLnRleHRDb250ZW50LFxuICAgICAgICAgIGFib3V0OiB0aGlzLl9qb2IudGV4dENvbnRlbnQsXG4gICAgICAgICAgYXZhdGFyOiB0aGlzLl9hdmF0YXIuc3JjXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHRoaXMuX3VzZXJJbmZvO1xuICAgIH1cblxuIC8vICDQl9Cw0L/QvtC70L3Rj9C10Lwg0L/QvtC70Y8g0LTQsNC90L3Ri9C80Lgg0L/RgNC+0YTQuNC70Y8g0LjQtyDQvtCx0YrQtdC60YLQsCDQuCDQv9C+0LTQs9GA0YPQttCw0LXQvCDQsNCy0LDRgtCw0YAg0L/QviDRgdGB0YvQu9C60LUgIC8vXG4gICAgc2V0VXNlckluZm8odXNlckluZm8pIHtcbiAgICAgIGlmICh1c2VySW5mby5wcm9maWxlTmFtZSAmJiB1c2VySW5mby5wcm9maWxlSm9iICYmIHVzZXJJbmZvLnByb2ZpbGVBdmF0YXIpIHtcbiAgICAgICAgdGhpcy5fbmFtZS50ZXh0Q29udGVudCA9IHVzZXJJbmZvLm5hbWU7XG4gICAgICAgIHRoaXMuX2pvYi50ZXh0Q29udGVudCA9IHVzZXJJbmZvLmFib3V0O1xuICAgICAgICB0aGlzLl9hdmF0YXIuc3JjID0gdXNlckluZm8uYXZhdGFyO1xuICAgICAgfSAgICAgIFxuICAgIH1cbn0iLCIvLyAg0JrQu9Cw0YHRgSDQtNC70Y8g0YDQsNCx0L7RgtGLINGBIEFQSS4g0JLRgdC1INC30LDQv9GA0L7RgdGLINC00L7Qu9C20L3RiyDQsdGL0YLRjCDQvNC10YLQvtC00LDQvNC4INGN0YLQvtCz0L4g0LrQu9Cw0YHRgdCwICAvL1xuXG4vLyAg0JIg0LrQvtC90YHRgtGA0YPQutGC0L7RgNC1INC/0L7Qu9GD0YfQsNC10LwgYmFzZVVybCDQuCDQt9Cw0LPQvtC70L7QstC60Lgg0LfQsNC/0YDQvtGB0LAgIC8vXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBcGkge1xuICBjb25zdHJ1Y3Rvcih7IGJhc2VVcmwsIGhlYWRlcnMgfSkge1xuICAgIHRoaXMuX2Jhc2VVcmwgPSBiYXNlVXJsO1xuICAgIHRoaXMuX2hlYWRlcnMgPSBoZWFkZXJzO1xuICB9XG5cbiAgLy8gINCe0LHRgNCw0LHQsNGC0YvQstCw0LXQvCDQvtGC0LLQtdGCINGB0LXRgNCy0LXRgNCwINC4LCDQtdGB0LvQuCDQvdC1INCe0JosINCy0YvQstC+0LTQuNC8INGA0LXQtNC20LXQutGC0LjQvCDRgSDQvtGI0LjQsdC60L7QuSAgLy9cbiAgX2hhbmRsZVNlcnZlclJlc3BvbnNlKHJlcykge1xuLyogICAgY29uc29sZS5sb2cocmVzLmpzb24oKSk7ICovXG4gICAgcmV0dXJuIHJlcy5vayA/IHJlcy5qc29uKCkgOiBQcm9taXNlLnJlamVjdChg0J7RiNC40LHQutCwOiAke3Jlcy5zdGF0dXN9YCk7XG4gIH1cblxuICAvLyAg0J/QvtC70YPRh9Cw0LXQvCDQtNC+0YHRgtGD0L/QvdGL0LUg0LrQsNGA0YLQvtGH0LrQuCDQvNC10YHRgiDRgSDRgdC10YDQstC10YDQsCDQvNC10YLQvtC00L7QvCBHRVQgIC8vXG4gIGdldENhcmRzKCkge1xuICAgIHRoaXMuX2NhcmRzID0gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pLnRoZW4odGhpcy5faGFuZGxlU2VydmVyUmVzcG9uc2UpO1xuLyogICAgY29uc29sZS5sb2codGhpcy5fY2FyZHMpOyAqL1xuICAgIHJldHVybiB0aGlzLl9jYXJkcztcbiAgfVxuXG4vLyAg0J/QvtC70YPRh9Cw0LXQvCDQtNCw0L3QvdGL0LUg0L/RgNC+0YTQuNC70Y8g0YEg0YHQtdGA0LLQtdGA0LAg0LzQtdGC0L7QtNC+0LwgR0VUICAvL1xuICBnZXRQcm9maWxlKCkge1xuICAgIHRoaXMuX3Byb2ZpbGVJbmZvID0gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pLnRoZW4odGhpcy5faGFuZGxlU2VydmVyUmVzcG9uc2UpO1xuLyogICAgY29uc29sZS5sb2coYGdldFByb2ZpbGU6ICR7dGhpcy5fcHJvZmlsZUluZm99YCk7ICovXG4gICAgcmV0dXJuIHRoaXMuX3Byb2ZpbGVJbmZvO1xuICB9XG5cbi8vICDQodC+0YXRgNCw0L3Rj9C10Lwg0LjQt9C80LXQvdC10L3QvdGL0LUg0LTQsNC90L3Ri9C1INC/0YDQvtGE0LjQu9GPINC90LAg0YHQtdGA0LLQtdGA0LUg0LzQtdGC0L7QtNC+0LwgUEFUQ0ggIC8vXG4gIHNldFByb2ZpbGUob2JqKSB7XG4gICAgY29uc29sZS5sb2coYG9iajogJHtvYmoucHJvZmlsZU5hbWV9LCAke29iai5wcm9maWxlSm9ifSxgKTtcbiAgICB0aGlzLl9uZXdQcm9maWxlID0gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vdXNlcnMvbWVgLCB7XG4gICAgICBtZXRob2Q6IFwiUEFUQ0hcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIG5hbWU6IG9iai5wcm9maWxlTmFtZSxcbiAgICAgICAgYWJvdXQ6IG9iai5wcm9maWxlSm9iLFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVTZXJ2ZXJSZXNwb25zZSk7XG4vKiAgICBjb25zb2xlLmxvZyhgcmVzU3RhdHVzOiAke3Jlcy5zdGF0dXN9YCk7ICovXG4gICAgcmV0dXJuIHRoaXMuX25ld1Byb2ZpbGU7XG4gIH1cblxuLy8gINCh0L7RhdGA0LDQvdGP0LXQvCDQuNC30LzQtdC90LXQvdC90YvQuSDQsNCy0LDRgtCw0YAg0L/RgNC+0YTQuNC70Y8g0L3QsCDRgdC10YDQstC10YDQtSDRh9C10YDQtdC3ICBQQVRDSCAgLy9cbiAgc2V0QXZhdGFyKG9iaikge1xuICAgIHRoaXMuX25ld0F2YXRhciA9IGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L3VzZXJzL21lL2F2YXRhcmAsIHtcbiAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgYXZhdGFyOiBvYmouYXZhdGFyLFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVTZXJ2ZXJSZXNwb25zZSk7XG4gICAgY29uc29sZS5sb2coYHNldEF2YXRhciAtIF9uZXdBdmF0YXI6ICR7dGhpcy5fbmV3QXZhdGFyfWApO1xuICAgIHJldHVybiB0aGlzLl9uZXdBdmF0YXI7XG4gIH1cblxuLy8gINCh0L7RhdGA0LDQvdGP0LXQvCDQtNCw0L3QvdGL0LUg0L4g0LvQsNC50LrQsNGFINC60LDRgNGC0L7Rh9C60Lgg0L3QsCDRgdC10YDQstC10YDQtSDRh9C10YDQtdC3ICBQVVQgIC8vXG4gIGFkZExpa2Uob2JqKSB7XG4gICAgdGhpcy5fbGlrZSA9IGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7b2JqLl9pZH0vbGlrZXNgLCB7XG4gICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICBoZWFkZXJzOiB0aGlzLl9oZWFkZXJzLFxuICAgIH0pLnRoZW4odGhpcy5faGFuZGxlU2VydmVyUmVzcG9uc2UpO1xuICAgIHJldHVybiB0aGlzLl9saWtlO1xuICB9XG5cbi8vICDQo9C00LDQu9GP0LXQvCDQu9Cw0LnQuiDQutCw0YDRgtC+0YfQutC4INGBINGB0LXRgNCy0LXRgNCwINGH0LXRgNC10LcgIERFTEVURSAgLy9cbiAgZGVsZXRlTGlrZShvYmopIHtcbiAgICB0aGlzLl9kZWxldGVMaWtlID0gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHMvJHtvYmouX2lkfS9saWtlc2AsIHtcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHRoaXMuX2hlYWRlcnMsXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVTZXJ2ZXJSZXNwb25zZSk7XG4gICAgcmV0dXJuIHRoaXMuX2RlbGV0ZUxpa2U7XG4gIH1cblxuLy8gINCU0L7QsdCw0LLQu9GP0LXQvCDQvdC+0LLRg9GOINC60LDRgNGC0L7Rh9C60YMg0L3QsCDRgdC10YDQstC10YDQtSDRh9C10YDQtdC3ICBQT1NUICAvL1xuICBhZGRDYXJkKG9iaikge1xuLyogICAgY29uc29sZS5sb2coYGFkZENhcmQgdG86ICR7dGhpcy5fYmFzZVVybH0vY2FyZHMgd2l0aDogJHt0aGlzLl9oZWFkZXJzfSwgJHtvYmoubmFtZX0sICR7b2JqLmxpbmt9YCk7ICovXG4gICAgdGhpcy5fYWRkZWRDYXJkID0gZmV0Y2goYCR7dGhpcy5fYmFzZVVybH0vY2FyZHNgLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgbmFtZTogb2JqLm5hbWUsXG4gICAgICAgIGxpbms6IG9iai5saW5rLFxuICAgICAgfSksXG4gICAgfSkudGhlbih0aGlzLl9oYW5kbGVTZXJ2ZXJSZXNwb25zZSk7XG4gICAgcmV0dXJuIHRoaXMuX2FkZGVkQ2FyZDtcbiAgfVxuXG4vLyAg0KPQtNCw0LvRj9C10Lwg0LrQsNGA0YLQvtGH0LrRgyDRgSDRgdC10YDQstC10YDQsCDRh9C10YDQtdC3ICBERUxFVEUgIC8vXG4gIGRlbGV0ZUNhcmQoaWQpIHtcbiAgICB0aGlzLl9kZWxldGVkQ2FyZCA9IGZldGNoKGAke3RoaXMuX2Jhc2VVcmx9L2NhcmRzLyR7aWR9YCwge1xuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgaGVhZGVyczogdGhpcy5faGVhZGVycyxcbiAgICB9KS50aGVuKHRoaXMuX2hhbmRsZVNlcnZlclJlc3BvbnNlKTtcbiAgICByZXR1cm4gdGhpcy5fZGVsZXRlZENhcmQ7XG4gIH1cbn0iLCIvLyAg0J/QtdGA0LXQvdC+0YHQuNC8IGluZGV4LmpzINCyIC9wYWdlcyAgLy9cbi8vICDQl9C00LXRgdGMINC00L7Qu9C20L3RiyDQvtGB0YLQsNGC0YzRgdGPINGC0L7Qu9GM0LrQviDRgdC+0LfQtNCw0L3QuNC1INC60LvQsNGB0YHQvtCyINC4INC00L7QsdCw0LLQu9C10L3QuNC1INC+0LHRgNCw0LHQvtGC0YfQuNC60L7QsiAgLy9cblxuLy8gINCY0LzQv9C+0YDRgtC40YDRg9C10Lwg0LIg0L3QtdCz0L4g0LLRgdC1INC60LvQsNGB0YHRiyAgLy9cbmltcG9ydCBDYXJkIGZyb20gXCIuLi9jb21wb25lbnRzL0NhcmQuanNcIjtcbmltcG9ydCBGb3JtVmFsaWRhdG9yIGZyb20gXCIuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanNcIjtcbmltcG9ydCBQb3B1cFdpdGhGb3JtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aEZvcm0uanNcIjtcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhJbWFnZS5qc1wiO1xuaW1wb3J0IFNlY3Rpb24gZnJvbSBcIi4uL2NvbXBvbmVudHMvU2VjdGlvbi5qc1wiO1xuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XG5cbi8vICDQmNC80L/QvtGA0YLQuNGA0YPQtdC8INC90L7QstGL0LUg0LrQu9Cw0YHRgdGLIEFwaSDQuCBQb3B1cFdpdGhDb25maXJtICAvL1xuaW1wb3J0IEFwaSBmcm9tIFwiLi4vY29tcG9uZW50cy9BcGkuanNcIjtcbmltcG9ydCBQb3B1cFdpdGhDb25maXJtIGZyb20gXCIuLi9jb21wb25lbnRzL1BvcHVwV2l0aENvbmZpcm0uanNcIjtcblxuLy8gINCY0LzQv9C+0YDRgtC40YDRg9C10Lwg0YHRgtC40LvQuCDQuNC3IGluZGV4LmNzcyAgLy9cbmltcG9ydCBcIi4vaW5kZXguY3NzXCI7XG5cbi8vICDQmNC80L/QvtGA0YLQuNGA0YPQtdC8INCy0YHQtSDQutC+0L3RgdGC0LDQvdGC0Ysg0LjQtyAvdXRpbHMvY29uc3RhbnRzLmpzICAvL1xuaW1wb3J0IHtcbiAgdmFsaWRhdGVDb25maWcsXG4vKiAgXG4gIGluaXRpYWxDYXJkcyxcbiAgcG9wdXBFZGl0LCBcbiAgcHJvZmlsZU5hbWUsXG4gIHByb2ZpbGVKb2IsXG4gIHByb2ZpbGVBdmF0YXIsXG4qL1xuICBidG5FZGl0LFxuICBuYW1lSW5wdXQsXG4gIGpvYklucHV0LFxuLyogIFxuICBwb3B1cEFkZCwgXG4gIHBsYWNlTmFtZUlucHV0LFxuICBwbGFjZUxpbmtJbnB1dCxcbiovXG4gIGJ0bkFkZCxcbiAgYnRuRWRpdEF2YXRhcixcbiAgZm9ybUVkaXRBdmF0YXIsXG4gIFxuLyogIGdhbGxlcnksICovXG4vKiAgcG9wdXBFbGVtZW50LCAqL1xuLyogIHBvcHVwSW1hZ2UsICovXG4gIHBvcHVwQ29uZmlybURlbGV0ZSxcbiAgcG9wdXBFZGl0QXZhdGFyLFxuICBmb3JtVmFsaWRhdG9ycyxcbn0gZnJvbSBcIi4uL3V0aWxzL2NvbnN0YW50cy5qc1wiO1xuXG4vLyAg0J7QsdGK0Y/QstC70Y/QtdC8INC/0LXRgNC10LzQtdC90L3Rg9GOINC00LvRjyDRjtC30LXRgNCwICAvL1xubGV0IHVzZXJJZDtcblxuLy8gINCh0L7Qt9C00LDQtdC8INC+0LHRitC10LrRgiDQtNC70Y8gQVBJLdC00L7RgdGC0YPQv9CwINC6INGB0LXRgNCy0LXRgNGDINGBINC/0L7Qu9GD0YfQtdC90L3Ri9C8INC60LvRjtGH0L7QvCDQsiDQt9Cw0LPQvtC70L7QstC60LUgIC8vXG5jb25zdCBhcGkgPSBuZXcgQXBpKHtcbiAgYmFzZVVybDogXCJodHRwczovL21lc3RvLm5vbW9yZXBhcnRpZXMuY28vdjEvY29ob3J0LTQ3XCIsXG4gIGhlYWRlcnM6IHtcbiAgICBhdXRob3JpemF0aW9uOiBcIjdhMmI1NjkxLTljOTEtNDk2Zi1iMzcwLWZkM2NjMWNlNzIxMFwiLFxuICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICB9LFxufSk7XG5cbi8vICDQodC+0LfQtNCw0LXQvCDRjdC60LfQtdC80L/Qu9GP0YAg0L/QvtC/0LDQv9CwINGBINC60LDRgNGC0L7Rh9C60L7QuSAgLy9cbmNvbnN0IHBvcHVwSW1hZ2UgPSBuZXcgUG9wdXBXaXRoSW1hZ2UoJyNwb3B1cEVsZW1lbnQnKTtcbnBvcHVwSW1hZ2Uuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLy8gINCe0YLQutGA0YvQstCw0LXQvCDQv9C+0L/QsNC/INC80LXRgdGC0LAg0L/RgNC4INC60LvQuNC60LUg0L3QsCDRhNC+0YLQviAgLy9cbmNvbnN0IGhhbmRsZUNhcmRDbGljayA9IChsaW5rLCBuYW1lKSA9PiB7XG4gIHBvcHVwSW1hZ2Uub3BlbihsaW5rLCBuYW1lKTtcbn07XG5cbi8vICDQk9C10L3QtdGA0LjRgNGD0LXQvCDQutCw0YDRgtC+0YfQutGDICjQuNC3INGI0LDQsdC70L7QvdCwKSDQuCDQstC+0LfQstGA0LDRidCw0LXQvCAgLy9cbi8vICDQn9C+0LvRg9GH0LDQtdC8INC00LDQvdC90YvQtSDRgSDRgdC10YDQstC10YDQsCwg0LLQutC70Y7Rh9Cw0Y8gaWQg0LrQsNGA0YLQvtGH0LrQuCwg0LDQstGC0L7RgNCwINC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjywg0LvQsNC50LrQuCAgLy9cbmNvbnN0IGNyZWF0ZUNhcmQgPSAoY2FyZERhdGEpID0+IHtcbiAgY29uc3QgY2FyZCA9IG5ldyBDYXJkKFxuICAgIHtcbiAgICAgIG5hbWU6IGNhcmREYXRhLm5hbWUsXG4gICAgICBsaW5rOiBjYXJkRGF0YS5saW5rLFxuICAgICAgY2FyZElkOiBjYXJkRGF0YS5faWQsXG4gICAgICBsaWtlczogY2FyZERhdGEubGlrZXMsXG4gICAgICB1c2VySWQ6IHVzZXJJZCxcbiAgICAgIG93bmVySWQ6IGNhcmREYXRhLm93bmVyLl9pZFxuICAgIH0sXG4gICAgJyNlbGVtZW50LXRlbXBsYXRlJywgXG4gICAgaGFuZGxlQ2FyZENsaWNrLFxuICAgICgpID0+IHBvcHVwQ29uZmlybS5vcGVuKGNhcmQpLFxuICAgICgpID0+IHtcbiAgICAgIHJldHVybiBhcGlcbiAgICAgICAgLmFkZExpa2UoY2FyZERhdGEpXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICBjYXJkLnNldExpa2VzQ291bnQocmVzKTtcbiAgICAgICAgICBjYXJkLmFkZExpa2UoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygn0J7RiNC40LHQutCwOiAnICsgZXJyKTtcbiAgICAgICAgfSlcbiAgICB9LFxuICAgICgpID0+IHtcbiAgICAgIHJldHVybiBhcGlcbiAgICAgICAgLmRlbGV0ZUxpa2UoY2FyZERhdGEpXG4gICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICBjYXJkLnNldExpa2VzQ291bnQocmVzKTtcbiAgICAgICAgICBjYXJkLnJlbW92ZUxpa2UoKTtcbiAgICAgICAgfSlcbiAgICB9XG4gICk7XG4gIFxuICByZXR1cm4gY2FyZC5jcmVhdGVDYXJkRWxlbWVudCgpO1xufTtcblxuLy8gINCh0L7Qt9C00LDQtdC8INGN0LrQt9C10LzQv9C70Y/RgCDRgdC10LrRhtC40LggKNGA0LXQvdC00LXRgNC40L3QsyDQutCw0YDRgtC+0YfQutC4KSAgLy9cbmNvbnN0IGNhcmRzU2VjdGlvbiA9IG5ldyBTZWN0aW9uKCBcbiAge1xuLyogICAgaXRlbXM6IGluaXRpYWxDYXJkcywgKi9cbiAgICByZW5kZXJlcjogKGNhcmREYXRhKSA9PiB7XG4gICAgICBjYXJkc1NlY3Rpb24uYWRkSXRlbShjcmVhdGVDYXJkKGNhcmREYXRhKSk7XG4gICAgfVxuICB9LFxuICAnLmVsZW1lbnRzJ1xuKTtcblxuLy8gINCX0LDQs9GA0YPQttCw0LXQvCDQuNGB0YXQvtC00L3Ri9C5INC90LDQsdC+0YAg0LrQsNGA0YLQvtGH0LXQuiAtINC+0YLQutC70Y7Rh9Cw0LXQvCDQu9C+0LrQsNC70YzQvdGL0Lkg0LzQsNGB0YHQuNCyICAvL1xuLyogY2FyZHNTZWN0aW9uLnJlbmRlckl0ZW1zKGluaXRpYWxDYXJkcyk7ICovXG5cbi8vICDQntCx0YDQsNCx0LDRgtGL0LLQsNC10Lwg0LrQu9C40Log0L/QviDQutC90L7Qv9C60LUg0YHQvtGF0YDQsNC90LXQvdC40Y8g0L3QvtCy0L7QuSDQutCw0YDRgtC+0YfQutC4INC80LXRgdGC0LAgIC8vXG4vLyAg0J/QtdGA0LXQtCDQvtCx0YDQsNCx0L7RgtC60L7QuSDQstGL0LfQvtCy0LAg0L/QviBBUEkg0L/QvtC60LDQt9GL0LLQsNC10Lwg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOIFVYLdGC0LXQutGB0YIgIC8vXG5jb25zdCBoYW5kbGVGb3JtQWRkUGxhY2VTdWJtaXQgPSAoY2FyZERhdGEpID0+IHtcbiAgcG9wdXBOZXdQbGFjZS5oYW5kbGVCdXR0b25UZXh0KHRydWUpO1xuICByZXR1cm4gYXBpXG4gIC5hZGRDYXJkKGNhcmREYXRhKVxuICAudGhlbigoY2FyZCkgPT4ge1xuICAgIGNhcmRzU2VjdGlvbi5hZGRJdGVtKGNyZWF0ZUNhcmQoY2FyZCkpO1xuICAgIHBvcHVwTmV3UGxhY2UuY2xvc2UoKTtcbiAgfSlcbiAgLmNhdGNoKChlcnIpID0+IHtcbiAgICBjb25zb2xlLmxvZygn0J7RiNC40LHQutCwOiAnICsgZXJyKTtcbiAgfSk7XG59O1xuXG4vLyAg0KHQvtC30LTQsNC10Lwg0Y3QutC30LXQvNC/0LvRj9GAINC/0L7Qv9Cw0L/QsCDRgSDRhNC+0YDQvNC+0Lkg0LTQu9GPINC00L7QsdCw0LLQu9C10L3QuNGPINC60LDRgNGC0L7Rh9C60Lgg0LzQtdGB0YLQsCAgLy9cbmNvbnN0IHBvcHVwTmV3UGxhY2UgPSBuZXcgUG9wdXBXaXRoRm9ybSgnI3BvcHVwQWRkUGxhY2UnLCBoYW5kbGVGb3JtQWRkUGxhY2VTdWJtaXQpO1xucG9wdXBOZXdQbGFjZS5zZXRFdmVudExpc3RlbmVycygpO1xuXG5jb25zdCBwb3B1cENvbmZpcm0gPSBuZXcgUG9wdXBXaXRoQ29uZmlybShcbiAgcG9wdXBDb25maXJtRGVsZXRlLFxuICBoYW5kbGVQb3B1cENvbmZpcm1TdWJtaXRcbik7XG5wb3B1cENvbmZpcm0uc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLy8gINCe0LHRgNCw0LHQsNGC0YvQstCw0LXQvCDQutC70LjQuiDQv9C+INC60L3QvtC/0LrQtSDRg9C00LDQu9C10L3QuNGPINC60LDRgNGC0L7Rh9C60Lgg0LzQtdGB0YLQsCAgLy9cbmNvbnN0IGhhbmRsZVBvcHVwQ29uZmlybVN1Ym1pdCA9IChjYXJkKSA9PiB7XG4gIHJldHVybiBhcGlcbiAgICAuZGVsZXRlQ2FyZChjYXJkLl9jYXJkSWQpXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgY2FyZC5kZWxldGVDYXJkKCk7XG4gICAgICBwb3B1cENvbmZpcm0uY2xvc2UoKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiBjb25zb2xlLmxvZygn0J7RiNC40LHQutCwOiAnICsgZXJyKSk7XG59O1xuXG4vLyAg0KHQvtC30LTQsNC10Lwg0Y3QutC30LXQvNC/0LvRj9GAINC60LvQsNGB0YHQsCBVc2VySW5mbyDRgSDQtNCw0L3QvdGL0LzQuCDQv9GA0L7RhNC40LvRjyAgLy9cbmNvbnN0IHByb2ZpbGVJbmZvID0gbmV3IFVzZXJJbmZvKCcucHJvZmlsZV9fbmFtZScsICcucHJvZmlsZV9fam9iJywnLnByb2ZpbGVfX2F2YXRhcicpO1xuXG4vLyAg0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INGB0L7RhdGA0LDQvdC10L3QuNC1INC00LDQvdC90YvRhSDQv9GA0L7RhNC40LvRjywg0LfQsNCx0LjRgNCw0LXQvCDQtNCw0L3QvdGL0LUg0L/QviBBUEkgIC8vXG4vLyAg0J/QtdGA0LXQtCDQvtCx0YDQsNCx0L7RgtC60L7QuSDQstGL0LfQvtCy0LAg0L/QviBBUEkg0L/QvtC60LDQt9GL0LLQsNC10Lwg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOIFVYLdGC0LXQutGB0YIgIC8vXG5jb25zdCBoYW5kbGVGb3JtUHJvZmlsZVN1Ym1pdCA9ICh1c2VySW5mbykgPT4ge1xuICBwb3B1cFByb2ZpbGUuaGFuZGxlQnV0dG9uVGV4dCh0cnVlKTtcbiAgY29uc29sZS5sb2coYHVzZXJJbmZvOiAke3VzZXJJbmZvLnByb2ZpbGVOYW1lfSwgJHt1c2VySW5mby5wcm9maWxlSm9ifWApO1xuICByZXR1cm4gYXBpXG4gICAgLnNldFByb2ZpbGUodXNlckluZm8pXG4gICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgcHJvZmlsZUluZm8uc2V0VXNlckluZm8ocmVzKTtcbiAgICAgIHBvcHVwUHJvZmlsZS5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKCfQntGI0LjQsdC60LA6ICcgKyBlcnIpKTtcbn07XG5cbi8vICDQodC+0LfQtNCw0LXQvCDRjdC60LfQtdC80L/Qu9GP0YAg0L/QvtC/0LDQv9CwINC/0YDQvtGE0LjQu9GPICAvL1xuY29uc3QgcG9wdXBQcm9maWxlID0gbmV3IFBvcHVwV2l0aEZvcm0oJyNwb3B1cFByb2ZpbGUnLCBoYW5kbGVGb3JtUHJvZmlsZVN1Ym1pdCk7XG5wb3B1cFByb2ZpbGUuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuXG4vLyAg0J7QsdGA0LDQsdCw0YLRi9Cy0LDQtdC8INGB0L7RhdGA0LDQvdC10L3QuNC1INCw0LLQsNGC0LDRgNCwINC/0YDQvtGE0LjQu9GPLCDQt9Cw0LHQuNGA0LDQtdC8INC00LDQvdC90YvQtSDQv9C+IEFQSSAgLy9cbi8vICDQn9C10YDQtdC0INC+0LHRgNCw0LHQvtGC0LrQvtC5INCy0YvQt9C+0LLQsCDQv9C+IEFQSSDQv9C+0LrQsNC30YvQstCw0LXQvCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y4gVVgt0YLQtdC60YHRgiAgLy9cbmNvbnN0IGhhbmRsZUZvcm1BdmF0YXJTdWJtaXQgPSAob2JqKSA9PiB7XG4gIHBvcHVwQXZhdGFyLmhhbmRsZUJ1dHRvblRleHQodHJ1ZSk7XG4gIHJldHVybiBhcGlcbiAgICAuc2V0QXZhdGFyKG9iailcbiAgICAudGhlbigobGluaykgPT4ge1xuICAgICAgcHJvZmlsZUluZm8uc2V0VXNlckluZm8obGluayk7XG4gICAgICBwb3B1cEF2YXRhci5jbG9zZSgpO1xuICAgIH0pXG4gICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCfQntGI0LjQsdC60LA6ICcgKyBlcnIpO1xuICAgIH0pO1xufTtcblxuY29uc3QgcG9wdXBBdmF0YXIgPSBuZXcgUG9wdXBXaXRoRm9ybShwb3B1cEVkaXRBdmF0YXIsIGhhbmRsZUZvcm1BdmF0YXJTdWJtaXQpO1xucG9wdXBBdmF0YXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuLy8gINCf0L7Qu9GD0YfQsNC10Lwg0LfQvdCw0YfQtdC90LjQtSB1c2VySWQg0Lgg0LrQsNGA0YLQvtGH0LrQuCDQtNC70Y8g0Y3RgtC+0LPQviDRjtC30LXRgNCwINGH0LXRgNC10LcgQVBJICjQv9GA0L7QvNC40YHQvtC8KSAgLy9cblByb21pc2UuYWxsKFthcGkuZ2V0Q2FyZHMoKSwgYXBpLmdldFByb2ZpbGUoKV0pXG4gIC50aGVuKCh2YWx1ZSkgPT4ge1xuICAgIHVzZXJJZCA9IHZhbHVlWzFdLl9pZDtcbiAgICBjYXJkc1NlY3Rpb24ucmVuZGVySXRlbXModmFsdWVbMF0ucmV2ZXJzZSgpKTtcbiAgICBwcm9maWxlSW5mby5zZXRVc2VySW5mbyh2YWx1ZVsxXSk7XG4gIH0pXG4gIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ9Ce0YjQuNCx0LrQsDogJyArIGVycik7XG4gIH0pO1xuXG5cbi8vICDQktC60LvRjtGH0LDQtdC8INCy0LDQu9C40LTQsNGG0LjRjiAgLy9cbmNvbnN0IGFjdGl2YXRlVmFsaWRhdGlvbiA9ICgpID0+IHtcbiAgY29uc3QgZm9ybUxpc3QgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodmFsaWRhdGVDb25maWcuZm9ybVNlbGVjdG9yKSk7XG4gIGZvcm1MaXN0LmZvckVhY2goKGZvcm1FbGVtZW50KSA9PiB7XG4gICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IEZvcm1WYWxpZGF0b3IodmFsaWRhdGVDb25maWcsIGZvcm1FbGVtZW50KTtcbiAgICBjb25zdCBmb3JtTmFtZSA9IGZvcm1FbGVtZW50LmdldEF0dHJpYnV0ZShcIm5hbWVcIik7XG4gICAgZm9ybVZhbGlkYXRvcnNbZm9ybU5hbWVdID0gdmFsaWRhdG9yO1xuICAgIHZhbGlkYXRvci5lbmFibGVWYWxpZGF0aW9uKCk7XG4gIH0pO1xufTtcblxuLy8gINCf0L7QtNC60LvRjtGH0LDQtdC8INGB0LvRg9GI0LDRgtC10LvQuCDQvdCwINC60L3QvtC/0LrQuCDQsiDQv9GA0L7RhNC40LvQtSAgLy9cbi8vICDQoNC10LTQsNC60YLQuNGA0L7QstCw0L3QuNC1INC/0YDQvtGE0LjQu9GPICAvL1xuYnRuRWRpdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBjb25zdCB1c2VySW5mbyA9IHByb2ZpbGVJbmZvLmdldFVzZXJJbmZvKCk7XG4gIGNvbnNvbGUubG9nKHVzZXJJbmZvKTtcbiAgbmFtZUlucHV0LnZhbHVlID0gdXNlckluZm8ubmFtZTtcbiAgam9iSW5wdXQudmFsdWUgPSB1c2VySW5mby5hYm91dDtcbiAgZm9ybVZhbGlkYXRvcnNbXCJwcm9maWxlRWRpdFwiXS5yZXNldFZhbGlkYXRpb24oKTtcbiAgcG9wdXBQcm9maWxlLmhhbmRsZUJ1dHRvblRleHQoZmFsc2UpOyAgXG4gIHBvcHVwUHJvZmlsZS5vcGVuKCk7XG59KTtcblxuLy8gINCU0L7QsdCw0LLQu9C10L3QuNC1INC90L7QstC+0Lkg0LrQsNGA0YLQvtGH0LrQuCDQvNC10YHRgtCwICAvL1xuYnRuQWRkLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gIGZvcm1WYWxpZGF0b3JzW1wiYWRkUGxhY2VcIl0ucmVzZXRWYWxpZGF0aW9uKCk7XG4gIHBvcHVwTmV3UGxhY2UuaGFuZGxlQnV0dG9uVGV4dChmYWxzZSk7ICBcbiAgcG9wdXBOZXdQbGFjZS5vcGVuKCk7XG59KTtcbi8vICDQl9Cw0LzQtdC90LAg0LDQstCw0YLQsNGA0LAg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPICAvL1xuYnRuRWRpdEF2YXRhci5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICBmb3JtVmFsaWRhdG9yc1tcImVkaXRBdmF0YXJcIl0ucmVzZXRWYWxpZGF0aW9uKCk7XG4gIHBvcHVwQXZhdGFyLmhhbmRsZUJ1dHRvblRleHQoZmFsc2UpO1xuICBwb3B1cEF2YXRhci5vcGVuKCk7XG59KTtcblxuLy8gINCS0YvQt9GL0LLQsNC10Lwg0LLQsNC70LjQtNCw0YbQuNGOICAvL1xuYWN0aXZhdGVWYWxpZGF0aW9uKCk7IiwiLy8gINCf0L7Qv9Cw0L8gYyDQv9C+0LTRgtCy0LXRgNC20LTQtdC90LjQtdC8INC00LXQudGB0YLQstC40Y8sINC90LDQv9GALiwg0LTQu9GPINGD0LTQsNC70LXQvdC40Y8g0LrQsNGA0YLQvtGH0LrQuCAgLy9cblxuaW1wb3J0IFBvcHVwIGZyb20gXCIuL1BvcHVwLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBvcHVwV2l0aENvbmZpcm0gZXh0ZW5kcyBQb3B1cCB7XG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIHN1Ym1pdEhhbmRsZXIpIHtcbiAgICBzdXBlcihwb3B1cFNlbGVjdG9yKTtcbiAgICB0aGlzLl9mb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcihcIi5wb3B1cF9fZm9ybVwiKTtcblxuICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIgPSBzdWJtaXRIYW5kbGVyO1xuICB9XG5cbiAgb3BlbihjYXJkKSB7XG4gICAgdGhpcy5fY2FyZCA9IGNhcmQ7XG4gICAgc3VwZXIub3BlbigpO1xuICB9XG5cbiAgc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcblxuICAgIHRoaXMuX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCAoZXZ0KSA9PiB7XG4gICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHRoaXMuX3N1Ym1pdEhhbmRsZXIodGhpcy5fY2FyZCk7XG4gICAgfSk7XG4gIH1cbn0iLCIvLyAg0LLRgdC1INC60L7QvdGB0YLQsNC90YLRiyDQstGL0L3QvtGB0LjQvCDQsiDQvtGC0LTQtdC70YzQvdGL0Lkg0YTQsNC50Lsg0LIg0L/QsNC/0LrQtSB1dGlscyAgLy9cblxuLy8gINCa0L3QvtC/0LrQuCDQsiDQv9GA0L7RhNC40LvQtSAgLy9cbmV4cG9ydCBjb25zdCBidG5FZGl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2J1dHRvbi1lZGl0Jyk7XG5leHBvcnQgY29uc3QgYnRuQWRkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2J1dHRvbi1hZGQnKTtcblxuLy8gICDQn9C+0L/QsNC/INGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40Y8g0L/RgNC+0YTQuNC70Y8gIC8vXG4vKiBleHBvcnQgY29uc3QgcG9wdXBFZGl0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3BvcHVwUHJvZmlsZScpOyAqL1xuZXhwb3J0IGNvbnN0IHBvcHVwRWRpdCA9IFwiI3BvcHVwUHJvZmlsZVwiO1xuZXhwb3J0IGNvbnN0IGZvcm1Qcm9maWxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Zvcm1Qcm9maWxlRWRpdCcpO1xuZXhwb3J0IGNvbnN0IG5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW5wdXRfdXNlcl9uYW1lJyk7XG5leHBvcnQgY29uc3Qgam9iSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2lucHV0X3VzZXJfam9iJyk7XG5leHBvcnQgY29uc3QgcHJvZmlsZU5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fbmFtZScpO1xuZXhwb3J0IGNvbnN0IHByb2ZpbGVKb2IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fam9iJyk7XG5leHBvcnQgY29uc3QgcHJvZmlsZUF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX19hdmF0YXInKTtcbmV4cG9ydCBjb25zdCBidG5FZGl0QXZhdGFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9maWxlX19hdmF0YXItZWRpdFwiKTtcblxuLy8gINCf0L7Qv9Cw0L8g0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjRjyDQsNCy0LDRgtCw0YDQsCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8gIC8vXG5leHBvcnQgY29uc3QgcG9wdXBFZGl0QXZhdGFyID0gXCIucG9wdXBfZWRpdC1hdmF0YXJcIjtcbmV4cG9ydCBjb25zdCBmb3JtRWRpdEF2YXRhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZGl0QXZhdGFyRm9ybScpO1xuLy8gINCf0L7Qv9Cw0L8g0LTQvtCx0LDQstC70LXQvdC40Y8g0L3QvtCy0L7Qs9C+INC80LXRgdGC0LAgLy9cbi8qIGV4cG9ydCBjb25zdCBwb3B1cEFkZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNwb3B1cEFkZFBsYWNlJyk7ICovXG5leHBvcnQgY29uc3QgcG9wdXBBZGQgPSBcIiNwb3B1cEFkZFBsYWNlXCI7XG5leHBvcnQgY29uc3QgZ2FsbGVyeSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50cycpO1xuZXhwb3J0IGNvbnN0IGZvcm1DcmVhdGVDYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Zvcm1BZGRQbGFjZScpO1xuZXhwb3J0IGNvbnN0IHBsYWNlTmFtZUlucHV0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbnB1dF9wbGFjZV9uYW1lJyk7XG5leHBvcnQgY29uc3QgcGxhY2VMaW5rSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2lucHV0X3BsYWNlX2xpbmsnKTtcbmV4cG9ydCBjb25zdCBidG5DcmVhdGVTdWJtaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYnRuUG9wdXBBZGRQbGFjZVN1Ym1pdCcpO1xuXG4vKiBjb25zdCBlbGVtZW50VGVtcGxhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZWxlbWVudC10ZW1wbGF0ZScpLmNvbnRlbnQ7IC8vINC/0L7QutCwINC90LUg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPKi9cblxuLy8gINCf0L7Qv9Cw0L8g0L7RgtC60YDRi9GC0LjRjyDQutCw0YDRgtC+0YfQutC4INC80LXRgdGC0LAgLy9cbi8qIGV4cG9ydCBjb25zdCBwb3B1cEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjcG9wdXBFbGVtZW50Jyk7ICovXG5leHBvcnQgY29uc3QgcG9wdXBFbGVtZW50ID0gXCIjcG9wdXBFbGVtZW50XCI7XG5leHBvcnQgY29uc3QgcG9wdXBJbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocG9wdXBFbGVtZW50KS5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2ltYWdlJyk7XG5leHBvcnQgY29uc3QgcG9wdXBJbWFnZUNhcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHBvcHVwRWxlbWVudCkucXVlcnlTZWxlY3RvcignLnBvcHVwX19pbWFnZS1jYXB0aW9uJyk7XG5cbi8vICDQn9C+0L/QsNC/INC/0L7QtNGC0LLQtdGA0LbQtNC10L3QuNGPINGD0LTQsNC70LXQvdC40Y8g0LrQsNGA0YLQvtGH0LrQuCAgLy9cbmV4cG9ydCBjb25zdCBwb3B1cENvbmZpcm1EZWxldGUgPSBcIiNwb3B1cENvbmZpcm1EZWxldGVQbGFjZVwiO1xuXG4vLyAg0JPQu9C+0LHQsNC70YzQvdGL0LUg0LrQvtC90YHRgtCw0L3RgtGLICAvL1xuZXhwb3J0IGNvbnN0IHBhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnZScpO1xuXG4vLyDQktGB0LUg0L/QvtC/0LDQv9GLINCyINC00L7QutGD0LzQtdC90YLQtSAvL1xuZXhwb3J0IGNvbnN0IHBvcHVwTGlzdCA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwJykpO1xuXG4vLyAg0JLRgdC1INC60L3QvtC/0LrQuCDQt9Cw0LrRgNGL0YLQuNGPINC/0L7Qv9Cw0L/QvtCyIC8vXG5leHBvcnQgY29uc3QgYnRuc0Nsb3NlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwX19jbG9zZScpO1xuXG4vLyAg0JLRgdC1INC60LDRgNGC0LjQvdC60Lgg0LrQsNGA0YLQvtGH0LXQuiAgLy9cbmV4cG9ydCBjb25zdCBpbWdFbGVtZW50cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5lbGVtZW50X19pbWFnZScpO1xuXG4vLyAg0J/Rg9GB0YLQvtC5INC+0LHRitC10LrRgiDQtNC70Y8g0LjQvdC40YbQuNCw0LvQuNC30LDRhtC40Lgg0L/QtdGA0LXQvNC10L3QvdC+0LkgRm9ybVZhbGlkYXRvcnMgIC8vXG5leHBvcnQgY29uc3QgZm9ybVZhbGlkYXRvcnMgPSB7fTtcblxuLy8gINCh0LXQu9C10LrRgtC+0YDRiyDQtNC70Y8g0LLQsNC70LjQtNCw0YbQuNC4INGE0L7RgNC8ICAvL1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlQ29uZmlnID0ge1xuICBmb3JtU2VsZWN0b3I6ICcucG9wdXBfX2Zvcm0nLFxuICBpbnB1dFNlbGVjdG9yOiAnLnBvcHVwX19pbnB1dCcsXG4gIGlucHV0RmllbGRTZXQ6ICcucG9wdXBfX2ZpZWxkc2V0JyxcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6ICcucG9wdXBfX3N1Ym1pdCcsXG4gIGluYWN0aXZlQnV0dG9uQ2xhc3M6ICdwb3B1cF9fc3VibWl0X2ludmFsaWQnLFxuICBpbnB1dEVycm9yQ2xhc3M6ICdwb3B1cF9fZmllbGQtZXJyb3JfdHlwZScsXG4gIGVycm9yQ2xhc3M6ICdwb3B1cF9fZmllbGQtZXJyb3JfYWN0aXZlJ1xufTtcblxuLy8gINCY0YHRhdC+0LTQvdGL0Lkg0L3QsNCx0L7RgCDQutCw0YDRgtC+0YfQtdC6ICAvL1xuZXhwb3J0IGNvbnN0IGluaXRpYWxDYXJkcyA9IFtcbiAgICB7XG4gICAgICBuYW1lOiAn0JDRgNGF0YvQtycsXG4gICAgICBsaW5rOiAnaHR0cHM6Ly9waWN0dXJlcy5zMy55YW5kZXgubmV0L2Zyb250ZW5kLWRldmVsb3Blci9jYXJkcy1jb21wcmVzc2VkL2Fya2h5ei5qcGcnXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAn0KfQtdC70Y/QsdC40L3RgdC60LDRjyDQvtCx0LvQsNGB0YLRjCcsXG4gICAgICBsaW5rOiAnaHR0cHM6Ly9waWN0dXJlcy5zMy55YW5kZXgubmV0L2Zyb250ZW5kLWRldmVsb3Blci9jYXJkcy1jb21wcmVzc2VkL2NoZWx5YWJpbnNrLW9ibGFzdC5qcGcnXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAn0JjQstCw0L3QvtCy0L4nLFxuICAgICAgbGluazogJ2h0dHBzOi8vcGljdHVyZXMuczMueWFuZGV4Lm5ldC9mcm9udGVuZC1kZXZlbG9wZXIvY2FyZHMtY29tcHJlc3NlZC9pdmFub3ZvLmpwZydcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICfQmtCw0LzRh9Cw0YLQutCwJyxcbiAgICAgIGxpbms6ICdodHRwczovL3BpY3R1cmVzLnMzLnlhbmRleC5uZXQvZnJvbnRlbmQtZGV2ZWxvcGVyL2NhcmRzLWNvbXByZXNzZWQva2FtY2hhdGthLmpwZydcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICfQpdC+0LvQvNC+0LPQvtGA0YHQutC40Lkg0YDQsNC50L7QvScsXG4gICAgICBsaW5rOiAnaHR0cHM6Ly9waWN0dXJlcy5zMy55YW5kZXgubmV0L2Zyb250ZW5kLWRldmVsb3Blci9jYXJkcy1jb21wcmVzc2VkL2tob2xtb2dvcnNreS1yYXlvbi5qcGcnXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAn0JHQsNC50LrQsNC7JyxcbiAgICAgIGxpbms6ICdodHRwczovL3BpY3R1cmVzLnMzLnlhbmRleC5uZXQvZnJvbnRlbmQtZGV2ZWxvcGVyL2NhcmRzLWNvbXByZXNzZWQvYmFpa2FsLmpwZydcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICfQmtCw0YDQsNGH0LDQtdCy0YHQuicsXG4gICAgICBsaW5rOiAnaHR0cHM6Ly9raXJpbGxjaGlzdG92LmdpdGh1Yi5pby9tZXN0by9pbWFnZXMva2FyYWNoYWV2c2suanBnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ9CT0L7RgNCwINCt0LvRjNCx0YDRg9GBJyxcbiAgICAgIGxpbms6ICdodHRwczovL2tpcmlsbGNoaXN0b3YuZ2l0aHViLmlvL21lc3RvL2ltYWdlcy9lbGJydXMuanBnJ1xuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ9CU0L7QvNCx0LDQuScsXG4gICAgICBsaW5rOiAnaHR0cHM6Ly9raXJpbGxjaGlzdG92LmdpdGh1Yi5pby9tZXN0by9pbWFnZXMvZG9tYmFpLmpwZydcbiAgICB9XG4gIF07Il0sIm5hbWVzIjpbIkNhcmQiLCJjYXJkRGF0YSIsImNhcmRTZWxlY3RvciIsImhhbmRsZUNhcmRDbGljayIsImhhbmRsZURlbGV0ZUNhcmQiLCJoYW5kbGVMaWtlIiwiaGFuZGxlUmVtb3ZlTGlrZSIsInRoaXMiLCJfbmFtZSIsIm5hbWUiLCJfbGluayIsImxpbmsiLCJfY2FyZFNlbGVjdG9yIiwiX3VzZXJJZCIsInVzZXJJZCIsIl9vd25lcklkIiwib3duZXJJZCIsIl9jYXJkSWQiLCJjYXJkSWQiLCJfbGlrZXMiLCJsaWtlcyIsIl9oYW5kbGVDYXJkQ2xpY2siLCJfaGFuZGxlTGlrZUFkZCIsIl9oYW5kbGVSZW1vdmVMaWtlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY29udGVudCIsImNsb25lTm9kZSIsIl9lbGVtZW50IiwiX2dldFRlbXBsYXRlIiwiX2ltZ0VsZW1lbnQiLCJfdGl0bGVFbGVtZW50IiwiX2xpa2VCdXR0b24iLCJfZGVsZXRlQnV0dG9uIiwiX2xpa2VzQ291bnQiLCJzcmMiLCJhbHQiLCJ0aXRsZSIsInRleHRDb250ZW50IiwibGVuZ3RoIiwiX3NldEV2ZW50TGlzdGVuZXJzIiwiX2hhbmRsZUxpa2VTdGF0ZSIsImhhbmRsZURlbGV0ZUJ1dHRvblN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiX2RlbGV0ZUNhcmQiLCJmb3JFYWNoIiwidXNlciIsIl9pZCIsImFkZExpa2UiLCJyZW1vdmVMaWtlIiwicmVtb3ZlIiwicmVzIiwiY29uc29sZSIsImxvZyIsImFkZCIsIkZvcm1WYWxpZGF0b3IiLCJ2YWxpZGF0ZUNvbmZpZyIsImZvcm1FbGVtZW50IiwiX2Zvcm0iLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbnB1dExpc3QiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiX2luYWN0aXZlQnV0dG9uQ2xhc3MiLCJpbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiX2lucHV0RXJyb3JDbGFzcyIsImlucHV0RXJyb3JDbGFzcyIsIl9lcnJvckNsYXNzIiwiZXJyb3JDbGFzcyIsIl9zdWJtaXRCdXR0b24iLCJpbnB1dE9iaiIsIl9lcnJvckVsZW1lbnQiLCJpZCIsIl9nZXRFcnJvckVsZW1lbnQiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsInZhbGlkaXR5IiwidmFsaWQiLCJfaGlkZUlucHV0RXJyb3IiLCJfc2hvd0lucHV0RXJyb3IiLCJpbnB1dEVsZW1lbnQiLCJpbnB1dCIsImVycm9yRWxlbWVudCIsIl9jaGVja0lucHV0VmFsaWRpdHkiLCJfdG9nZ2xlU3VibWl0QnV0dG9uU3RhdGUiLCJfaGFzSW52YWxpZElucHV0IiwiZGVhY3RpdmF0ZVN1Ym1pdEJ1dHRvbiIsImFjdGl2YXRlU3VibWl0QnV0dG9uIiwiZGlzYWJsZWQiLCJzb21lIiwiZXZ0IiwicHJldmVudERlZmF1bHQiLCJQb3B1cCIsInBvcHVwU2VsZWN0b3IiLCJfcG9wdXAiLCJfaGFuZGxlQ2xvc2VCeUVzYyIsImJpbmQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwia2V5IiwiY2xvc2UiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiUG9wdXBXaXRoRm9ybSIsInN1Ym1pdEhhbmRsZXIiLCJfc3VibWl0SGFuZGxlciIsIl9mb3JtVmFsdWVzIiwidmFsdWUiLCJfZ2V0SW5wdXRWYWx1ZXMiLCJyZXNldCIsImlzTG9hZGluZyIsIlBvcHVwV2l0aEltYWdlIiwiX2ltYWdlIiwiX3RpdGxlIiwiU2VjdGlvbiIsImNvbnRhaW5lciIsInJlbmRlcmVyIiwiX2NvbnRhaW5lciIsIl9yZW5kZXJlciIsIl9yZW5kZXJlZEl0ZW1zIiwiaXRlbSIsImVsZW1lbnQiLCJwcmVwZW5kIiwiaW5uZXJIVE1MIiwiVXNlckluZm8iLCJwcm9maWxlTmFtZSIsInByb2ZpbGVKb2IiLCJwcm9maWxlQXZhdGFyIiwiX2pvYiIsIl9hdmF0YXIiLCJfdXNlckluZm8iLCJhYm91dCIsImF2YXRhciIsInVzZXJJbmZvIiwiQXBpIiwiYmFzZVVybCIsImhlYWRlcnMiLCJfYmFzZVVybCIsIl9oZWFkZXJzIiwib2siLCJqc29uIiwiUHJvbWlzZSIsInJlamVjdCIsInN0YXR1cyIsIl9jYXJkcyIsImZldGNoIiwidGhlbiIsIl9oYW5kbGVTZXJ2ZXJSZXNwb25zZSIsIl9wcm9maWxlSW5mbyIsIm9iaiIsIl9uZXdQcm9maWxlIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJfbmV3QXZhdGFyIiwiX2xpa2UiLCJfZGVsZXRlTGlrZSIsIl9hZGRlZENhcmQiLCJfZGVsZXRlZENhcmQiLCJQb3B1cFdpdGhDb25maXJtIiwiY2FyZCIsIl9jYXJkIiwiYnRuRWRpdCIsImJ0bkFkZCIsIm5hbWVJbnB1dCIsImpvYklucHV0IiwiYnRuRWRpdEF2YXRhciIsInBvcHVwRWxlbWVudCIsImZvcm1WYWxpZGF0b3JzIiwiZm9ybVNlbGVjdG9yIiwiaW5wdXRGaWVsZFNldCIsImFwaSIsImF1dGhvcml6YXRpb24iLCJwb3B1cEltYWdlIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJvcGVuIiwiY3JlYXRlQ2FyZCIsIm93bmVyIiwicG9wdXBDb25maXJtIiwic2V0TGlrZXNDb3VudCIsImNhdGNoIiwiZXJyIiwiZGVsZXRlTGlrZSIsImNyZWF0ZUNhcmRFbGVtZW50IiwiY2FyZHNTZWN0aW9uIiwiYWRkSXRlbSIsInBvcHVwTmV3UGxhY2UiLCJoYW5kbGVCdXR0b25UZXh0IiwiYWRkQ2FyZCIsImhhbmRsZVBvcHVwQ29uZmlybVN1Ym1pdCIsImRlbGV0ZUNhcmQiLCJwcm9maWxlSW5mbyIsInBvcHVwUHJvZmlsZSIsInNldFByb2ZpbGUiLCJzZXRVc2VySW5mbyIsInBvcHVwQXZhdGFyIiwic2V0QXZhdGFyIiwiYWxsIiwiZ2V0Q2FyZHMiLCJnZXRQcm9maWxlIiwicmVuZGVySXRlbXMiLCJyZXZlcnNlIiwiZ2V0VXNlckluZm8iLCJ2YWxpZGF0b3IiLCJmb3JtTmFtZSIsImdldEF0dHJpYnV0ZSIsImVuYWJsZVZhbGlkYXRpb24iXSwic291cmNlUm9vdCI6IiJ9